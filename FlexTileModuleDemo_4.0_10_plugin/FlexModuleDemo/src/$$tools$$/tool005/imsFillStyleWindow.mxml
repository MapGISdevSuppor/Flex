<?xml version="1.0" encoding="utf-8"?>
<components:BasicTileWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
							width="310" height="282" x="950" y="250" title="填充样式">
	<components:layout>
		<s:BasicLayout/>
	</components:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import config.ServerIP;
			
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import org.osmf.layout.AbsoluteLayoutFacet;
			
			import spark.events.IndexChangeEvent;
			
			import utilEvent.ReadURLEvent;
			
			import zdims.drawing.GraphicsLayer;
			import zdims.map.IMSMap;
			
			import zdimsExtends.styles.*;
			import zdimsExtends.util.*;	
			private var fillOBj:*;
			private var fillstyle:*;
			private var chose:Boolean;
			
			public var mapContainer:IMSMap;
			public var toolId:String;
			public var imsFiWindow:IMSFillStyleModule=null;
			public var basicFlexApp:FlexModuleDemo=null;
			private var GraphicsLaye:GraphicsLayer=null;
			
		
			//选择多边形对象处理事件
			public function call(obj:*,event:MouseEvent):void
			{
				if(this.fillOBj!=null)
				{					
					//设置上次选择对象为不可编辑
					this.fillOBj.enableEdit=false;
				}
				this.chose=true;	
				//获取鼠标当前选择的对象,设为编辑状态
				fillOBj=obj; 
				this.fillOBj.enableEdit=true;
			}
			//检测当前选择对象是否为空
			public function checkStyle(obj:*):Boolean
			{
				if(obj==null)
				{
					Alert.show("请选择多边形！");
					return false;
				}
				else
				{
					return true;
				}
			}
			//设置图片填充多边形的图片宽
			protected function picWidth_changeHandler(event:Event):void
			{
				setpicWidth();
			}
			protected function picWidth_clickHandler(event:MouseEvent):void
			{
				setpicWidth();
			}
			//设置图片填充多边形的图片宽
			protected function setpicWidth():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片宽
					this.fillOBj.width=this.picWidth.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//设置图片填充多边形的图片高
			protected function picHeight_changeHandler(event:Event):void
			{
				setpicHeight();
			}
			protected function picHeight_clickHandler(event:MouseEvent):void
			{
				setpicHeight();
			}
			//设置图片填充多边形的图片高
			private function setpicHeight():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片高
					this.fillOBj.height=this.picHeight.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//设置图片填充多边形的图片X轴缩放比例
			protected function picXScale_changeHandler(event:Event):void
			{
				setpicXScale();
			}
			protected function picXScale_clickHandler(event:MouseEvent):void
			{
				setpicXScale();
			}
			//设置图片填充多边形的图片X轴缩放比例
			protected function setpicXScale():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片X轴缩放比例
					this.fillOBj.xScale=this.picXScale.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//设置图片填充多边形的图片Y轴缩放比例
			protected function picYScale_changeHandler(event:Event):void
			{
				setpicYScale();
			}
			protected function picYScale_clickHandler(event:MouseEvent):void
			{
				setpicYScale();
			}
			protected function setpicYScale():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片Y轴缩放比例
					this.fillOBj.yScale=this.picYScale.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//设置图片填充多边形的图片透明度
			protected function picAlpha_changeHandler(event:Event):void
			{
				setPicAlpha()
			}
			protected function picAlpha_clickHandler(event:MouseEvent):void
			{
				setPicAlpha();
			}
			
			private function setPicAlpha():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片透明度
					this.fillOBj.alpha=this.picAlpha.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//设置图片填充多边形的图片旋转角度
			protected function picAngle_changeHandler(event:Event):void
			{
				setpicAngle();
			}
			protected function picAngle_clickHandler(event:MouseEvent):void
			{
				setpicAngle();
			}
			//设置图片填充多边形的图片旋转角度
			protected function setpicAngle():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充多边形的图片旋转角度
					this.fillOBj.angle=this.picAngle.value;
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			//程序加载完毕事件
			public function showPolygonStyle():void
			{	
				if(GraphicsLaye){
					GraphicsLaye.removeAllElements();
				}
				if(GraphicsLaye==null){
					GraphicsLaye=new GraphicsLayer();
					this.mapContainer.addElement(GraphicsLaye);
				}
				
				//添加地图容器的鼠标弹起事件：取消选择当前对象
				this.mapContainer.removeEventListener(MouseEvent.MOUSE_UP,Cancle);
				this.mapContainer.addEventListener(MouseEvent.MOUSE_UP,Cancle);
				//初始化预定义几何矢量位图填充多边形对象
				fillstyle=new IMSPredefinedFillStyle();
				//添加对象的鼠标按下事件：用于鼠标选择编辑的多边形
				fillstyle.mouseDownCallback=call;
				this.fillstyle.shape.toolTip="预定义面样式属性框中修改样式";
				//设置多边形的填充样式：颜色填充
				fillstyle.Fillsymbol=zdimsExtends.util.FillSymbol.SYMBOL_SOLID;
				//设置多边形边宽
				fillstyle.thinkness=5;
				//将多边形对象添加到绘图层	
				this.GraphicsLaye.addGraphics(fillstyle);
				//设置多边形的坐标点
				fillstyle.points.push(new Point(36.99847059269956 , -10.922859993414875)); 
				fillstyle.points.push(new Point(25.19370767986862 ,-39.95311797584719));
				fillstyle.points.push(new Point(15.39078574368858 ,10.023067459998288));
				fillstyle.enableReDraw=true;
				fillstyle.enableEdit=false;
				//绘制多边形
				fillstyle.draw();
				//初始化预定义几何矢量位图填充多边形对象	
				var fillstyle2:IMSPredefinedFillStyle=new IMSPredefinedFillStyle();		
				fillstyle2.shape.toolTip="预定义面样式属性框中修改样式";
				//添加对象的鼠标按下事件：用于鼠标选择编辑的多边形
				fillstyle2.mouseDownCallback=call;
				//将多边形对象添加到绘图层	
				this.GraphicsLaye.addGraphics(fillstyle2);
				//设置多边形的坐标点
				fillstyle2.points.push(new Point(-10.68808092153128 , -39.0945702186148555)); 
				fillstyle2.points.push(new Point(-57.49468481101299 ,5.189887541385886));
				fillstyle2.points.push(new Point(-18.311355005921143, -1.8110329469395197));
				fillstyle2.points.push(new Point(0.88055654372414 , -15.996491430867593));
				fillstyle2.enableReDraw=true;
				fillstyle2.enableEdit=false;
				//绘制多边形
				fillstyle2.draw();
				
			}
			//取消选择处理事件
			private function Cancle(e:MouseEvent):void
			{
				if(!this.chose)
				{
					//若当前选择了对象，取消选择
					if(this.fillOBj!=null&&this.fillOBj.enableEdit)
					{						
						this.fillOBj.enableEdit=false;
						this.fillOBj=null;
					}
				}
				else
				{
					this.chose=false;
				}
			}
			
			protected function fillColor_changeHandler(event:ColorPickerEvent):void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置几何填充的颜色值
					fillOBj.Fillcolor=this.fillColor.value as uint;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			
			//设置多边形的几何填充符号
			protected function markerSymbol_changeHandler(event:IndexChangeEvent):void
			{
				setFillsymbol();
			}
			protected function FillSymbol_clickHandler(event:MouseEvent):void
			{
				setFillsymbol();
			}
			protected function setFillsymbol():void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置多边形的几何填充符号
					fillOBj.Fillsymbol=this.FillSymbol.selectedItem;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			protected function lineColor_changeHandler(event:ColorPickerEvent):void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置几何填充的边框颜色
					fillOBj.BorderColor=this.lineColor.value as uint;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			
			//设置边框显示样式
			protected function lineSymbol_changeHandler(event:IndexChangeEvent):void
			{
				setBorderSymbol();
			}
			protected function lineSymbol_clickHandler(event:MouseEvent):void
			{
				setBorderSymbol();
			}
			
			private function setBorderSymbol():void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置边框显示样式
					this.fillOBj.BorderSymbol=this.lineSymbol.selectedItem;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			//设置多边形的边框透明度
			protected function lineAlpha_changeHandler(event:Event):void
			{
				setLineAlpha();
			}
			protected function lineAlpha_clickHandler(event:MouseEvent):void
			{
				setLineAlpha();
			}
			private function setLineAlpha():void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置多边形的边框透明度
					fillOBj.BorderAlpha=this.lineAlpha.value;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			//设置多边形的边宽
			protected function borderWeight_changeHandler(event:Event):void
			{
				setborderWeight();
			}
			protected function borderWeight_clickHandler(event:MouseEvent):void
			{
				setborderWeight();
			}
			protected function setborderWeight():void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置多边形的边宽
					this.fillOBj.thinkness=this.borderWeight.value;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			//设置多边形的填充透明度
			protected function fillAlpha_changeHandler(event:Event):void
			{
				setfillAlpha();
			}
			protected function fillAlpha_clickHandler(event:MouseEvent):void
			{
				setfillAlpha();
			}
			protected function setfillAlpha():void
			{
				if(fillOBj is IMSPredefinedFillStyle&&fillOBj!=null)
				{
					//设置多边形的填充透明度
					fillOBj.Fillalpha=this.fillAlpha.value;
				}
				else
				{
					Alert.show("请选择几何图形填充的多边形！");
				}
			}
			//设置图片填充的图片路径
			protected function PicSrc_clickHandler(event:MouseEvent):void
			{
				setPicSource();
			}
			
			
			protected function PicSrc_changeHandler(event:IndexChangeEvent):void
			{
				setPicSource();
			}
			
			private function setPicSource():void
			{
				if(fillOBj is  IMSPictureFillStyle&&fillOBj!=null)
				{
					//设置图片填充的图片路径
					this.fillOBj.source="$$tools$$/"+toolId+"/FillStyleImage/"+this.PicSrc.selectedItem.id.toLowerCase()+".png";
				}
				else
				{
					Alert.show("请选择图片填充的多边形！");
				}
			}
			private var changFlag:int=0;
			protected function tabnavigator1_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				if(changFlag==0){
					showImgStyle();
					changFlag=1;
				}else{
					showPolygonStyle();
					changFlag=0;
				}
			}
			//程序加载完毕事件
			public function showImgStyle():void
			{	
				if(GraphicsLaye){
					GraphicsLaye.removeAllElements();
				}
				if(GraphicsLaye==null){
					GraphicsLaye=new GraphicsLayer();
					this.mapContainer.addElement(GraphicsLaye);
				}
				
				//添加地图容器的鼠标弹起事件：取消选择当前对象
				this.mapContainer.removeEventListener(MouseEvent.MOUSE_UP,Cancle);
				this.mapContainer.addEventListener(MouseEvent.MOUSE_UP,Cancle);
				//初始化图片填充多边形对象
				var drawPicStr:String="$$tools$$/"+toolId+"/FillStyleImage/unknown.png";
				var fillstyle1 :IMSPictureFillStyle=new  IMSPictureFillStyle(drawPicStr);
				//将多边形对象添加到绘图层	
				this.GraphicsLaye.addGraphics(fillstyle1);			
				fillstyle1.mouseDownCallback=call;
				fillstyle1.shape.toolTip="图片填充样式属性框中修改样式";
				fillstyle1.enableEdit=false;
				//设置多边形边框样式：虚线+点样式
				fillstyle1.BorderSymbol=LineType.SYMBOL_DASHDOT;
				fillstyle1.points.push(new Point(-10.211355005921143, -0.8120329469395197)); 
				fillstyle1.points.push(new Point(3.380196299561444,  30.38522462855499));
				fillstyle1.points.push(new Point(-5.87055654372414 , 50.986491430867593));
				//绘制多边形		
				fillstyle1.draw();		
			}
		
			public override function close():void{
				if(GraphicsLaye){
					GraphicsLaye.removeAllElements();
					this.mapContainer.removeElement(GraphicsLaye);
					GraphicsLaye=null;
				}
				if(imsFiWindow){
					if(imsFiWindow.imsFillWindow){
						this.basicFlexApp.main.removeElement(imsFiWindow.imsFillWindow);
						imsFiWindow.imsFillWindow=null;
					}
				}
			}
			public override function onMouseUp(e:MouseEvent):void{
				this.basicFlexApp.main.removeElement(this);
				this.basicFlexApp.main.addElement(this);
			}
		]]>
	</fx:Script>
	<mx:TabNavigator x="0" y="0" width="297" height="240"  change="tabnavigator1_changeHandler(event)">
		<s:NavigatorContent label="预定义面样式属性" width="100%" height="100%" >
			<s:layout>
				<s:VerticalLayout horizontalAlign="right"
								  paddingBottom="0"
								  paddingTop="0"/>
			</s:layout>
			<mx:Form paddingBottom="4"
					 paddingTop="4"
					 width="100%">
				<mx:FormItem label="填充颜色:">
					<mx:ColorPicker id="fillColor" selectedColor="0xee0000" change="fillColor_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="填充透明度:">
					<s:HSlider id="fillAlpha"
							   liveDragging="true"
							   maximum="1"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.01"
							   value="1"
							   width="100" click="fillAlpha_clickHandler(event)" change="fillAlpha_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="填充符号:">
					<s:DropDownList id="FillSymbol" selectedIndex="1" width="100"  click="FillSymbol_clickHandler(event)" change="markerSymbol_changeHandler(event)" >
						<s:ArrayList>
							<fx:String>null</fx:String>
							<fx:String>solid</fx:String>
							<fx:String>horizontal</fx:String>
							<fx:String>vertical</fx:String>
							<fx:String>cross</fx:String>
							<fx:String>slash</fx:String>
							<fx:String>backslash</fx:String>
						</s:ArrayList>
					</s:DropDownList>
				</mx:FormItem>
				<mx:FormItem label="边框颜色:">
					<mx:ColorPicker id="lineColor" selectedColor="5276389" change="lineColor_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="边框宽度:">
					<s:HSlider id="borderWeight"
							   liveDragging="true"
							   maximum="10"
							   focusEnabled="false"
							   minimum="1"
							   snapInterval="1"
							   value="2"
							   width="100" click="borderWeight_clickHandler(event)" change="borderWeight_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="边框透明度:">
					<s:HSlider id="lineAlpha"
							   liveDragging="true"
							   maximum="1"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.01"
							   value="1"
							   width="100" click="lineAlpha_clickHandler(event)" change="lineAlpha_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="边框符号:">
					<s:DropDownList id="lineSymbol" width="100" selectedIndex="1" click="lineSymbol_clickHandler(event)" change="lineSymbol_changeHandler(event)">
						<s:ArrayList>
							<fx:String>null</fx:String>
							<fx:String>solid</fx:String>
							<fx:String>dash</fx:String>
							<fx:String>dot</fx:String>
							<fx:String>dashdot</fx:String>
							<fx:String>dashdotdot</fx:String>			
						</s:ArrayList>
					</s:DropDownList>
				</mx:FormItem>
			</mx:Form>
		</s:NavigatorContent>	
		
		
		<s:NavigatorContent label="图片填充样式属性" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="right"
								  paddingBottom="0"
								  paddingTop="0"/>
			</s:layout>
			<mx:Form paddingBottom="4"
					 paddingTop="4"
					 width="100%" height="200">
				<mx:FormItem label="宽度:">
					<s:HSlider id="picWidth"
							   liveDragging="true"
							   maximum="80"
							   focusEnabled="false"
							   minimum="1"
							   snapInterval="1"
							   value="40"
							   width="100%" click="picWidth_clickHandler(event)" change="picWidth_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="高度:">
					<s:HSlider id="picHeight"
							   liveDragging="true"
							   maximum="80"
							   minimum="1"
							   focusEnabled="false"
							   snapInterval="1"
							   value="40"
							   width="100%" click="picHeight_clickHandler(event)" change="picHeight_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="X缩放:">
					<s:HSlider id="picXScale"
							   liveDragging="true"
							   maximum="10"
							   minimum="0.1"
							   focusEnabled="false"
							   snapInterval="0.1"
							   value="1"
							   width="100%" click="picXScale_clickHandler(event)" change="picXScale_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Y缩放:">
					<s:HSlider id="picYScale"
							   liveDragging="true"
							   maximum="10"
							   minimum="0.1"
							   focusEnabled="false"
							   snapInterval="0.1"
							   value="1"
							   width="100%" click="picYScale_clickHandler(event)" change="picYScale_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="图片透明度:">
					<s:HSlider id="picAlpha"
							   liveDragging="true"
							   maximum="1"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.01"
							   value="1"
							   width="100%" click="picAlpha_clickHandler(event)" change="picAlpha_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="旋转:">
					<s:HSlider id="picAngle"
							   liveDragging="true"
							   maximum="360"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="1"
							   value="0"
							   width="100%" click="picAngle_clickHandler(event)" change="picAngle_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="填充图片:">
					<s:DropDownList id="PicSrc"  x="2" y="1" selectedIndex="3" 
									
									width="60"
									height="30"
									textAlign="center" 
									fontSize="20" 
									fontWeight="normal"
									itemRenderer="spark.skins.spark.DefaultComplexItemRenderer"
									click="PicSrc_clickHandler(event)"
									change="PicSrc_changeHandler(event)"
									skinClass="skins.CustomDropDownListSkin" 
									showInAutomationHierarchy="true">
						<s:dataProvider  >
							<s:ArrayList>
								<s:BitmapImage alpha="1"  source="@Embed('FillStyleImage/tianditu.png')" id="tianditu"/>
								<s:BitmapImage alpha="1" source="@Embed('FillStyleImage/marker.png')" id="marker"/>
								<s:BitmapImage alpha="1" source="@Embed('FillStyleImage/m_minimize.png')" id="m_minimize"/>
								<s:BitmapImage alpha="1" source="@Embed('FillStyleImage/unknown.png')" id="unknown"/>
							</s:ArrayList>
						</s:dataProvider>
					</s:DropDownList>
				</mx:FormItem>
				
			</mx:Form>	
		</s:NavigatorContent>
		
		
		
	</mx:TabNavigator>		
</components:BasicTileWindow>
