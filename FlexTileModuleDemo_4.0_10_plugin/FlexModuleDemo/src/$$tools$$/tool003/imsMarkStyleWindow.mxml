<?xml version="1.0" encoding="utf-8"?>
<components:BasicTileWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*" 
							width="310" height="192" x="950" y="150" title="点样式">
	<components:layout>
		<s:BasicLayout/>
	</components:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import spark.events.IndexChangeEvent;
			
			import utilEvent.ReadURLEvent;
			
			import zdims.drawing.CoordinateType;
			import zdims.map.IMSMap;
			import zdims.mark.IMSMark;
			import zdims.mark.MarkLayer;
			
			import zdimsExtends.styles.*;	
			private var chose:Boolean;
			private var style:*;
			private var Prestyle:*;	
			private var PicStyle:*;
			//-----
			public var mapContainer:IMSMap;
			public var markLayer:MarkLayer;
			public var basicFlexApp:FlexModuleDemo;
			public var imsMarkStyleModule:IMSMarkStyleModule;
			public var toolId:String="";
			
			
			//取消选择处理事件
			private function Cancle(e:MouseEvent):void
			{
				if(!this.chose)
				{
					if(this.style!=null&&this.style.EnableEdit)
					{
						//若当前选择了对象，取消选择
						this.style.EnableEdit=false;
						this.style=null;
					}
				}
				else
				{
					this.chose=false;
				}
			}
			//设置图标大小
			protected function size_changeHandler(event:Event):void
			{  
				setsize();
				
			}
			
			protected function size_clickHandler(event:MouseEvent):void
			{
				setsize();
			}
			
			protected function setsize():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedMarkStyle)
						//设置图标大小
						this.style.size=this.size.value;
					else
					{
						Alert.show("不是选择的几何图形点！");
					}
					
				}
			}
			
			protected function fillColor_changeHandler(event:ColorPickerEvent):void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedMarkStyle)
						//设置图标颜色
						this.style.color=this.fillColor.value;
					else
					{
						Alert.show("不是选择的几何图形点！");
					}
				}
			}
			//设置图标透明度
			protected function fillAlpha_changeHandler(event:Event):void
			{
				setfillAlpha();
			}
			
			protected function fillAlpha_clickHandler(event:MouseEvent):void
			{
				setfillAlpha();
			}
			protected function setfillAlpha():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedMarkStyle)
						//设置图标透明度
						this.style.Alpha=this.fillAlpha.value;
					else
					{
						Alert.show("不是选择的几何图形点！");
					}
				}
			}
			//设置几何点显示样式
			protected function markerSymbol_changeHandler(event:IndexChangeEvent):void
			{
				setSymbol();
			}
			protected function markerSymbol_clickHandler(event:MouseEvent):void
			{
				setSymbol();
			}
			private function setSymbol():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedMarkStyle)
						//设置几何点显示样式
						this.style.symbol=this.markerSymbol.selectedItem;
					else
					{
						Alert.show("不是选择的几何图形点！");
					}
				}
			}
			private function GetRandomCoordinate(index:int, centerX:Number, 
												 centerY:Number, temp:Number):Point
			{
				//获取随机点
				switch (index % 16)
				{
					case 0:
						centerX = centerX + temp;
						//centerY = centerY;
						break;
					case 1:
						centerX = centerX + temp * 0.866;
						centerY = centerY + temp / 2;
						break;
					case 2:
						centerX = centerX + temp * 0.707;
						centerY = centerY + temp * 0.707;
						break;
					case 3:
						centerX = centerX + temp / 2;
						centerY = centerY + temp * 0.866;
						break;
					case 4:
						//centerX = centerX;
						centerY = centerY + temp;
						break;
					case 5:
						centerX = centerX - temp / 2;
						centerY = centerY + temp * 0.866;
						break;
					case 6:
						centerX = centerX - temp * 0.707;
						centerY = centerY + temp * 0.707;
						break;
					case 7:
						centerX = centerX - temp * 0.866;
						centerY = centerY + temp / 2;
						break;
					case 8:
						centerX = centerX - temp;
						//centerY = centerY;
						break;
					case 9:
						centerX = centerX - temp * 0.866;
						centerY = centerY - temp / 2;
						break;
					case 10:
						centerX = centerX - temp * 0.707;
						centerY = centerY - temp * 0.707;
						break;
					case 11:
						centerX = centerX - temp / 2;
						centerY = centerY - temp * 0.866;
						break;
					case 12:
						//centerX = centerX;
						centerY = centerY - temp;
						break;
					case 13:
						centerX = centerX + temp / 2;
						centerY = centerY - temp * 0.866;
						break;
					case 14:
						centerX = centerX + temp * 0.707;
						centerY = centerY - temp * 0.707;
						break;
					case 15:
						centerX = centerX + temp * 0.866;
						centerY = centerY - temp / 2;
						break;
				}
				return new Point(centerX,centerY);
			}		
			
			//选择多边形对象处理事件
			public function call1(obj:*,event:MouseEvent):void
			{
				if(this.style!=null)
				{
					this.style.EnableEdit=false;
				}
				this.chose=true;
				//设置当前鼠标选择的对象
				this.style=obj;
				if(obj is IMSPredefinedMarkStyle)
				{					
					this.style.toolTip="预定义点样式属性框中修改样式";
					
				}
				if(obj is IMSPredefinedPictureMarkStyle)
				{					
					this.style.toolTip="图片点样式属性框中修改样式";
				}
				//设置为可编辑
				this.style.EnableEdit=true;
				
			}
			//检查当前是否选择对象
			public function checkStyle(obj:*):Boolean
			{
				if(obj==null)
				{
					Alert.show("请选择点！");
					return false;
				}
				else
				{
					return true;
				}
			}
			//设置图片点的宽度
			protected function picWidth_changeHandler(event:Event):void
			{
				setpicWidth();
			}
			protected function picWidth_clickHandler(event:MouseEvent):void
			{
				setpicWidth();
			}
			protected function setpicWidth():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedPictureMarkStyle)
						//设置图片点的宽度
						this.style.Width=this.picWidth.value;
					else
					{
						Alert.show("不是选择的图片样式点！");
					}
				}
			}
			//设置图片点的高度
			protected function picHeight_changeHandler(event:Event):void
			{
				setpicHeight();
			}
			protected function picHeight_clickHandler(event:MouseEvent):void
			{
				setpicHeight();
			}
			protected function  setpicHeight():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedPictureMarkStyle)
						//设置图片点的高度
						this.style.Height=this.picHeight.value;
					else
					{
						Alert.show("不是选择的图片样式点！");
					}
				}		
			}
			//设置图片点的透明度
			protected function picAlpha_changeHandler(event:Event):void
			{
				setpicAlpha();
			}	
			protected function picAlpha_clickHandler(event:MouseEvent):void
			{
				setpicAlpha();
			}
			protected function setpicAlpha():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedPictureMarkStyle)
					{
						//设置图片点的透明度
						this.style.Alpha=this.picAlpha.value;
					}
					else
					{
						this.picAlpha.enabled=false;
						Alert.show("不是选择的图片样式点！");
					}
				}				
			}
			//设置图片点的旋转角度
			protected function picAngle_changeHandler(event:Event):void
			{
				setpicAngle();
			}
			protected function picAngle_clickHandler(event:MouseEvent):void
			{
				setpicAngle();
			}
			protected function setpicAngle():void
			{
				if(checkStyle(style))
				{
					if(this.style is IMSPredefinedPictureMarkStyle)
						//设置图片点的旋转角度
						this.style.angle=this.picAngle.value;
					else
					{
						Alert.show("不是选择的图片样式点！");
					}
				}
			}
			public override function close():void{
				this.mapContainer.removeEventListener(MouseEvent.CLICK,Cancle);
				this.mapContainer.addEventListener(MouseEvent.CLICK,Cancle);
			      if(markLayer){
					  markLayer.removeAllElements();
				  }	
				  if(imsMarkStyleModule){
				  	if(imsMarkStyleModule.imsMarkStyleTile){
						this.basicFlexApp.main.removeElement(imsMarkStyleModule.imsMarkStyleTile);
						imsMarkStyleModule.imsMarkStyleTile=null;
					}
					  
				  }
			}
			public override function onMouseUp(e:MouseEvent):void{
				this.basicFlexApp.main.removeElement(this);
				this.basicFlexApp.main.addElement(this);
				
			}
			private var dotStyleMarkArr:Array=null;
			
			public function showDotStyleMark():void{
				dotStyleMarkArr=null;
				dotStyleMarkArr=new Array();
				//添加地图容器的鼠标弹起事件：取消选择当前对象
				this.mapContainer.removeEventListener(MouseEvent.CLICK,Cancle);
				this.mapContainer.addEventListener(MouseEvent.CLICK,Cancle);
					var count:int=0;
					var xMin:Number = -181.183997790225;
					var yMin:Number = -90.7340663245236;
					var xMax:Number = 188.619962766591;
					var yMax:Number = 279.069894232288;
					var centerX:Number =3.11;// (xMin + xMax) / 2;
					var centerY:Number = 5.93;//(yMin + yMax) / 2;
					var pnt:Point;
					var mark:IMSMark;
					var styleTemp:*;
					while(count<5)
					{
						//生成随机指标
						pnt=GetRandomCoordinate(Math.random()*100+Math.random()*100+Math.random()*10,centerX,centerY,15);
						centerX=pnt.x;
						centerY=pnt.y;
						if (centerX > xMin && centerX < xMax && centerY > yMin && centerY < yMax)
						{
							count++;
							//初始化几何点对象
							styleTemp=new  IMSPredefinedMarkStyle();
							//添加对象的鼠标按下事件：用于鼠标选择编辑的点
							styleTemp.mouseClickCallback=call1;
							//new mark对象，传入点样式对象
							mark=new IMSMark(styleTemp,CoordinateType.Logic);
							//将mark对象赋值给集合点对象的属性
							styleTemp.mark=mark;
							//设置坐标
							mark.x=centerX;
							mark.y=centerY;	
							mark.enableAnimation=false;
							//mark对象添加marklayer图层
							markLayer.addMark(mark);
							dotStyleMarkArr.push(mark);
						}
						else
						{
							centerX = (xMin + xMax) / 2;
							centerY = (yMin + yMax) / 2;
						}
					}
			
			}
			private var imgStyleMarkArr:Array=null;	
		public function showImgStyleMark():void{
			imgStyleMarkArr=null;
			imgStyleMarkArr=new Array();
			var count:int=0;
			var xMin:Number = -181.183997790225;
			var yMin:Number = -90.7340663245236;
			var xMax:Number = 188.619962766591;
			var yMax:Number = 279.069894232288;
			var centerX:Number =3.11;// (xMin + xMax) / 2;
			var centerY:Number = 5.93;//(yMin + yMax) / 2;
			var pnt:Point;
			var mark:IMSMark;
			var styleTemp:*;
			count=0;
			while(count<5)
			{  
				//生成随机指标			
				pnt=GetRandomCoordinate(Math.random()*100+Math.random()*100+Math.random()*10,centerX,centerY,30);
				centerX=pnt.x;
				centerY=pnt.y;
				if (centerX > xMin && centerX < xMax && centerY > yMin && centerY < yMax)
				{
					count++;
					//初始化图片样式点对象
					var imgURLStr:String="$$tools$$/"+toolId+"/MarkStyleImg/unknown.png";
					styleTemp=new  IMSPredefinedPictureMarkStyle(imgURLStr);
					//new mark对象，传入点样式对象
					mark=new IMSMark(styleTemp,CoordinateType.Logic);	
					//添加对象的鼠标按下事件：用于鼠标选择编辑的点
					styleTemp.mouseClickCallback=call1;
					//将mark对象赋值给集合点对象的属性
					styleTemp.mark=mark;	
					//设置坐标
					mark.x=centerX;
					mark.y=centerY;
					mark.enableAnimation=false;
					//mark对象添加marklayer图层
					markLayer.addMark(mark);
					imgStyleMarkArr.push(mark);
				}
				else
				{
					centerX = (xMin + xMax) / 2;
					centerY = (yMin + yMax) / 2;
				}
			}
		
		
		}
		
		private var changeFlag:int=0;

			protected function tabnavigator1_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				if(changeFlag==0){
					if(dotStyleMarkArr){
						
						for(var i:int=0;i<dotStyleMarkArr.length;i++){
							if(this.markLayer){
								this.markLayer.removeMark(dotStyleMarkArr[i]);
							}
						}
					}
					dotStyleMarkArr=null;
					showImgStyleMark();
					changeFlag=1;
				}else{
					if(imgStyleMarkArr){
						for(var j:int=0;j<imgStyleMarkArr.length;j++){
							if(this.markLayer){
								this.markLayer.removeMark(imgStyleMarkArr[j]);
							}
						}
					}
					imgStyleMarkArr=null;
					showDotStyleMark();
					changeFlag=0;
				}
			}

		]]>
	</fx:Script>
	<mx:TabNavigator x="0" y="0" width="297" height="150" change="tabnavigator1_changeHandler(event)">
		<s:NavigatorContent label="预定义点样式属性" width="100%" height="100%">
			
				<s:layout>
					<s:VerticalLayout horizontalAlign="right"
									  paddingBottom="0"
									  paddingTop="0"/>
				</s:layout>
			<mx:Form paddingBottom="4"
					 paddingTop="4"
					 width="100%">
				<mx:FormItem label="填充颜色:">
					<mx:ColorPicker id="fillColor" change="fillColor_changeHandler(event)" selectedColor="0xcc3300"/>
				</mx:FormItem>
				<mx:FormItem label="填充大小:">
					<s:HSlider id="size"
							   liveDragging="true"
							   maximum="60"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.1"
							   value="20"
							   width="100" click="size_clickHandler(event)" change="size_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="填充透明度:">
					<s:HSlider id="fillAlpha"
							   liveDragging="true"
							   maximum="1"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.01"
							   value="0.8"
							   width="100" click="fillAlpha_clickHandler(event)" change="fillAlpha_changeHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="点符号:">
					<s:DropDownList id="markerSymbol" selectedIndex="0" click="markerSymbol_clickHandler(event)" change="markerSymbol_changeHandler(event)"
									 width="95">
						<s:ArrayList>
							<fx:String>circle</fx:String>
							<fx:String>star</fx:String>
							<fx:String>sector</fx:String>
							<fx:String>diamond</fx:String>
							<fx:String>square</fx:String>
							<fx:String>triangle</fx:String>
							<fx:String>x</fx:String>
						</s:ArrayList>
					</s:DropDownList>
				</mx:FormItem>
			</mx:Form>

		</s:NavigatorContent>
		<s:NavigatorContent label="图片点样式属性" width="100%" height="100%" >
			<mx:Form paddingBottom="4"
					 paddingTop="4"
					 width="100%">
				<mx:FormItem label="宽度:">
					<s:HSlider id="picWidth"
							   liveDragging="true"
							   maximum="80"
							   minimum="1"
							   focusEnabled="false"
							   snapInterval="1"
							   value="50"
							   width="100%" click="picWidth_clickHandler(event)" change="picWidth_changeHandler(event)" />
				</mx:FormItem>
				<mx:FormItem label="高度:">
					<s:HSlider id="picHeight"
							   liveDragging="true"
							   maximum="80"
							   focusEnabled="false"
							   minimum="1"
							   snapInterval="1"
							   value="50"
							   width="100%" click="picHeight_clickHandler(event)" change="picHeight_changeHandler(event)" />
				</mx:FormItem>
				<mx:FormItem label="图片透明度:">
					<s:HSlider id="picAlpha"
							   liveDragging="true"
							   maximum="1"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="0.01"
							   value="0.8"
							   click="picAlpha_clickHandler(event)"
							   change="picAlpha_changeHandler(event)"
							   width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="旋转:">
					<s:HSlider id="picAngle"
							   liveDragging="true"
							   maximum="360"
							   minimum="0"
							   focusEnabled="false"
							   snapInterval="1"
							   value="0"
							   width="100%" click="picAngle_clickHandler(event)"  change="picAngle_changeHandler(event)"   />
				</mx:FormItem>
			</mx:Form>
		</s:NavigatorContent>
	</mx:TabNavigator>
</components:BasicTileWindow>
