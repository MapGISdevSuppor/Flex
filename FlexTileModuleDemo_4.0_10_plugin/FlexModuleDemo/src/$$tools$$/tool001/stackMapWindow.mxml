<?xml version="1.0" encoding="utf-8"?>
<components:BasicTileWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
						   title="地图设置窗口"  x="900" y="50" width="306" height="196" >
	<components:layout>
		<s:BasicLayout/>
	</components:layout>
		<fx:Declarations>
			<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		</fx:Declarations>
		<fx:Script>
			<![CDATA[
				import Mapgis7.WebService.BasLib.CDisplayStyle;
				import Mapgis7.WebService.BasLib.CDynNoteInfo;
				import Mapgis7.WebService.BasLib.CSetLayerDisplayStyle;
				import Mapgis7.WebService.BasLib.DynShowStyle;
				
				import config.ServerIP;
				
				import mx.controls.Alert;
				import mx.events.FlexEvent;
				import mx.events.SliderEvent;
				
				import utilEvent.ReadURLEvent;
				
				import zdims.map.VectorLayer;
				import zdims.map.VectorLayerBase;
				import zdims.map.VectorLayerDataCfg;
				import zdims.map.VectorLayerSource;
				private var dynNoteInfo:CDynNoteInfo;
				private var dynStyle:DynShowStyle;
				private var displayStyle:CDisplayStyle;
				private var setDisplayStyle:CSetLayerDisplayStyle;
				private var VecAddress:String="";
				private var TileAddress:String="";
				private var viewConfig:ServerIP;
				public var basicApp:FlexModuleDemo=null;
				public var showStackModule:ShowStackMapModule=null;
				private var river:VectorLayer=null;
				
				public function initLayerShow():void{
					var vectorSource:VectorLayerSource=new VectorLayerSource();
					vectorSource.layerName="RIVER.WL";
					vectorSource.layerType="简单要素类";
					var vecDataCfg:VectorLayerDataCfg=new VectorLayerDataCfg();
					vecDataCfg.GDBName="7CA6BBEC-2F0F-4415-93F9-2331724";
					vecDataCfg.GDBServerName="MapGisLocal";
					vecDataCfg.layerInfos=[vectorSource];
					river=new VectorLayer();
					river.layerInfoArr=[vecDataCfg];
					river.serverAddress=basicApp.serverAddress;
					this.basicApp.imsmap.addElement(river);
					//river.layerOpenCallBack=layerOpenCallBack;
				}
				protected function layerOpenCallBack(layer:VectorLayerBase):void{
					river_creationCompleteHandler();
					
				}
				protected function vectlayer_changeHandler(event:Event):void
				{
					// 河流图层显示控制	
					if(this.vectlayer.selected)
					{
						//设置显示河流图层
						if(river==null){
							initLayerShow();
						}else{
							this.river.display=true;
						}
						
						//显示河流图层时解开控制面板的河流名称显示控制按钮
						//this.layername.enabled = true;
					}			    
					else
					{
						if(river!=null){
							//设置隐藏河流图层
							this.river.display = false;
							//设置图层不透明
							this.river.alpha = this.vectAlpha.value = 1;
						}
						
						//隐藏河流图层时锁定控制面板的河流名称显示控制按钮
						//this.layername.enabled = false;
					}	
				}
				
				protected function vectAlpha_changeHandler():void
				{
					//设置矢量河流图层的透明度
					if(this.river){
						this.river.alpha = this.vectAlpha.value;
					}
					
				}
				//			protected function layername_changeHandler(event:Event):void
				//			{
				//				if(this.vectlayer.selected)
				//				{
				//					if(this.layername.selected)
				//					{
				//						//设置显示河流名称的动态注记					
				//						this.dynStyle.DynNoteFlag = true;
				//					}
				//					else
				//					{
				//						//设置不显示河流名称的动态注记
				//						this.dynStyle.DynNoteFlag = false;
				//					}		
				//					//更新图层的地图显示样式
				//					this.displayStyle.ShowStyle[0] = this.dynStyle;
				//					//更新地图显示参数
				//					this.setDisplayStyle.DisplayStyle[0] = this.displayStyle;
				//					//设置河流图层显示样式 
				//					this.river.setLayerDisplayStyle(this.setDisplayStyle,setDisplayStyle_callback);
				//					
				//				}
				//			}
				
				protected function setDisplayStyle_callback(e:Event):void
				{
					//刷新河流图层
					this.river.refresh();
				}
				protected function river_creationCompleteHandler():void
				{
					//初始化动态注记类对象
					dynNoteInfo = new CDynNoteInfo();
					//设置显示动态注记的字段名 
					dynNoteInfo.FieldName = "NAME"; 
					//设置显示动态注记的字体大小 
					dynNoteInfo.FontSize = 12;
					//初始化地图显示参数对象
					dynStyle = new DynShowStyle();
					//设置显示动态注记
					dynStyle.DynNoteFlag = true;
					//设置动态注记参数
					dynStyle.DynNoteInfo = dynNoteInfo;
					//初始化地图显示样式类对象
					displayStyle = new CDisplayStyle();
					displayStyle.ShowStyle = new Array();
					//设置第一个图层的地图显示样式
					displayStyle.ShowStyle[0] = dynStyle;
					//初始化设置图像显示参数 
					setDisplayStyle = new CSetLayerDisplayStyle();
					setDisplayStyle.DisplayStyle = new Array();
					//设置需要的显示参数
					setDisplayStyle.DisplayStyle[0] = displayStyle;
				}
					public override function close():void{
						if(vectlayer){
							vectlayer.selected=false;
						}
						if(this.river){
							this.river.display=false;
						}
						
						this.visible=false;
					}
					public override function onMouseUp(e:MouseEvent):void{
						if(showStackModule){
							if(showStackModule.stMapWindow){
								this.basicApp.main.removeElement(showStackModule.stMapWindow);
								this.basicApp.main.addElement(showStackModule.stMapWindow);
							}
						
						}
						
					}
			]]>
		</fx:Script>
		<s:VGroup  x="15" y="15"  fontSize="12" fontStyle="normal">
			<mx:Label x="15" y="20" text="叠加图层："  />
			<!--世界地图显示控制的按钮-->
			<s:HGroup>
				<!--河流图层与其名称注记显示控制的按钮-->
				<mx:CheckBox x="15" y="40"  id="vectlayer" label="主要河流（矢量图层）" change="vectlayer_changeHandler(event)"/>
				<!--<mx:CheckBox x="100" y="40" id="layername"  label="是否显示河流名称" enabled="false"  change="layername_changeHandler(event)"/>-->	
			</s:HGroup>
			<mx:HRule  x="20" y="60" width="260" height="2" strokeColor="#000000" shadowColor="#ffffff" alpha="0.4"/>
			<mx:Label  x="15" y="80" text="图层透明度：" />
			<!--世界地图透明度控制控件-->
			<!--河流图层透明度控制控件-->
			<s:HGroup>
				<mx:Label  x="15" y="80" text="河流图层透明度：" />
				
				<s:HSlider x="15" y="90" width="150" id="vectAlpha" minimum="0" maximum="1"  
                          stepSize="0.1"   liveDragging="true"  value="1"   
						   change="vectAlpha_changeHandler()">
					
				</s:HSlider>
			</s:HGroup>
		</s:VGroup>	


</components:BasicTileWindow>
