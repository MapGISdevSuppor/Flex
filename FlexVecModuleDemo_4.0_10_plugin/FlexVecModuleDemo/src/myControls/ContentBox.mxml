<?xml version="1.0" encoding="utf-8"?>
<!--内容显示窗体-->
<IMSWindow xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns="zdims.control.*" 
		   xmlns:myControls="myControls.*"
		   x="0" y="127" title="驾车搜索"
		   width="300" height="300" minHeight="200" minWidth="298"
		   backgroundAlpha="0.4" backgroundColor="0x524f4f"
		   
		   creationComplete="unit()" close="close()"  creationCompleteEffect="blur" showEffect="blur" borderStyle="solid" horizontalAlign="center" verticalAlign="middle" fontSize="12" cornerRadius="10" borderAlpha="0.4">	

	<mx:TabNavigator id="tabNa" right="5" left="5" y="0" height="100%"  backgroundColor="0x524f4f" backgroundAlpha="0.4"  fontSize="11" barColor="0x524f4f" paddingLeft="10" color="0xffffff" paddingRight="10" paddingTop="10" paddingBottom="10">
		
		<!--公交-->
		<s:NavigatorContent id="search_bus" label="公交" x="5" width="100%" height="100%"  fontSize="12" fontWeight="bold" click="search_bus_clickHandler(event)"  color="0xffffff">
			<s:Label x="20" y="28" text="起点" id="startStop1" fontWeight="bold"/>
			<s:Label x="20" y="68" text="终点" id="stopStop1"  fontWeight="bold"/>
			<myControls:AutoComplete id="start" x="46" y="22" text="请输入起点" fontSize="11" dataProvider="{startValues}" click="start_clickHandler(event)"  color="0x000000"/>
			<myControls:AutoComplete id="stop" x="46" y="64" text="请输入终点" fontSize="11" dataProvider="{stopValues}" click="stop_clickHandler(event)" color="0x000000"/>
			<mx:Button id="searchBus" x="220" y="64" label="搜索"  fillColors="0x524f4f" click="searchBus_clickHandler(event)"/>
		</s:NavigatorContent>
		
		<!--自驾-->
		<s:NavigatorContent id="search_car" label="自驾" width="100%" height="100%" buttonMode="true"  fontSize="12" fontWeight="bold" click="search_car_clickHandler(event)"  color="0xffffff">
			<s:Label x="20" y="28" text="起点" id="startStop2" fontWeight="bold"/>
			<s:Label x="20" y="68" text="终点" id="stopStop2" fontWeight="bold"/>
			<myControls:AutoComplete id="start1" x="46" y="22" text="请输入起点关键字" fontSize="11" dataProvider="{start1Values}" click="start1_clickHandler(event)" color="0x000000"/>
			<myControls:AutoComplete id="stop1" x="46" y="64" text="请输入终点关键字" fontSize="11" dataProvider="{stop1Values}" click="stop1_clickHandler(event)" color="0x000000"/>
			<mx:Button id="searchCar" x="220" y="64" label="搜索"  fillColors="0x524f4f" click="searchCar_clickHandler(event)"/>
		</s:NavigatorContent>
		
		<!--本地搜索-->
		<s:NavigatorContent id="search_location" label="搜索" width="100%" height="100%" buttonMode="true"  fontSize="12" fontWeight="bold" click="search_location_clickHandler(event)" >
			<s:TextInput x="20" y="35" id="keyword"  text="请输入查询条件" change="onTextChange(this.keyword.text)" click="keyword_clickHandler(event)" fontSize="11" color="0x000000"/>
			<mx:Button  id="searchLocation" y="35" x="180"  label="搜索" width="55" fontWeight="bold" fillColors="0x524f4f" click="searchLocation_submit()"/>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	
	<mx:Script>
		<![CDATA[
			import Mapgis7.WebService.BasLib.CGdbInfo;
			import Mapgis7.WebService.BasLib.CNetAnalyse;
			import Mapgis7.WebService.BasLib.CNetEdge;
			import Mapgis7.WebService.BasLib.CNetNode;
			import Mapgis7.WebService.BasLib.CNetPath;
			import Mapgis7.WebService.BasLib.CPathAnalyzeResult;
			import Mapgis7.WebService.BasLib.Dot_2D;
			import Mapgis7.WebService.BasLib.EnumLayerStatus;
			
			import mx.collections.ArrayCollection;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.HBox;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.LinkButton;
			import mx.controls.ProgressBar;
			import mx.controls.Text;
			import mx.core.UIComponent;
			import mx.effects.Iris;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.soap.WebService;
			import mx.utils.ObjectProxy;
			
			import sjd.managers.ResizeManager;
			
			import zdims.control.IMSRoad;
			import zdims.control.Marker;
			import zdims.control.MarkerEdit;
			import zdims.event.IMSMapEvent;
			import zdims.interfaces.IVector;
			import zdims.map.IMSMap;
			import zdims.map.VectorMapDoc;
			import zdims.util.BusCom;
			import zdims.util.Node;
			import zdims.util.SpacialAnalyse;

			private var lastEvent:String;
			private var lastCallFun:Function;
			
			//公交换乘
			private var _selectList:AutoComplete;
			private var _busCom:BusCom = new BusCom();
			private var _road:Array = new Array();
			private var stopbox:stopInfo;
			
		    //自驾
			private var tmpStopInfo1:Array;
			private var pathDots:String="";
			public var road:IMSRoad;
			private var _spacial:SpacialAnalyse;
			
			//本地搜索
			private var web:WebService;
			
			include "Data.as";
			
			/**
			 *关联到结果显示控件
			 */
			 [Inspectable(category="MapGisIMS")]
			public var busresult:myMapCheckResult; 

			/**
			 *自驾搜索数据源设置
			 */
			[Inspectable(category="MapGisIMS")]
			public var GDBName:String="world";
			[Inspectable(category="MapGisIMS")]
			public var GDBSvrName="MapGisLocal";
			[Inspectable(category="MapGisIMS")]
			public var Password:String="";
			[Inspectable(category="MapGisIMS")]
			public var User:String="";
			[Inspectable(category="MapGisIMS")]
			public var NetLayerName:String="武汉道路网";
			
			/**矢量地图对象
			 *自驾
			 */
			private var vectorObj:IVector;
			
			/**
			 *设置IP
			 */
			[Inspectable(category="MapGisIMS")]
			public function set serverAdress(value:String):void
			{
				this._busCom.serverAddress=value;
			}		
			/**
			 *获取IP
			 */
			public function get serverAdress():String
			{
				return this._busCom.serverAddress;
			}
			
			private function addMapEvent(evtType:String,fun:Function):void
			{
				this.imsmap.addEventListener(evtType,fun);
				this.lastEvent=evtType;
				this.lastCallFun=fun;
			}
			
			private function removeMapEvent(evtType:String,fun:Function):void
			{
				if (evtType!=null&&fun!=null)
				{
					this.imsmap.removeEventListener(evtType,fun);
				}
			}
			
			private function onOperTypeChange(e:Event):void
			{
				removeMapEvent(this.lastEvent,this.lastCallFun);
			}
			
			public  function unit():void
			{
				if(imsmap==null)
				{
					Alert.show("imsmap属性未赋值。","提示");
					return
				}
				this.addEventListener(FlexEvent.HIDE,resetData);
				//初始化Web服务请求
				web = new WebService();
				web.loadWSDL("http://localhost/WebService/Service.asmx?WSDL");//加载Web服务
			}
			
			/**
			 *公交换乘窗口初始化
			 */
			protected function search_bus_clickHandler(event:MouseEvent):void
			{
				this.busresult.location_grid.removeAllChildren();
				this.busresult.location_grid.visible=false;
				this.busresult.roadResult.visible=false;
				clearMarker();
                if(this.road)
					resetcar();
			}
			
			/**
			 *公交换乘输入框内容初始化
			 */
			protected function start_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(this._busCom.serverAddress==null)
					Alert.show("用户'sa'登录失败，请检查连接设置!");
				if(!this.imsmap.activeMapDoc)
				{
					Alert.show("请切换到2D视图再进行公交搜索！","提示");
					return;
				}
				start.text="";
				clearAllRoad();
		        this.busresult.busResult.removeAllChildren();
				this.busresult.visible=false;
			}
			
			/**
			 *公交换乘输入框内容初始化
			 */
			protected function stop_clickHandler(event:MouseEvent):void
			{
				if(this._busCom.serverAddress==null)
					Alert.show("用户'sa'登陆失败，请检查连接设置!");
				if(!this.imsmap.activeMapDoc)
				{
					Alert.show("请切换到2D视图再进行公交搜索！","提示");
					return;
				}
				stop.text="";
				clearAllRoad();
				this.busresult.busResult.removeAllChildren();
				this.busresult.busResult.visible=false;
			}
			
			/**
			 *公交换乘初始化
			 */
			public function changeMap():void
			{
				if (imsmap == null)
				{
					Alert.show("imsmap属性未赋值。","提示");
					return;
				}
				this.addEventListener(FlexEvent.HIDE,resetData);
			}
			
			/**
			 *清空数据
			 */
			public function resetData(e:Event):void
			{
				this.hideAllRoad();
				    this.busresult.busResult.removeAllChildren();	
			}
			
			/**
			 *搜索公交换乘方案
			 */
			protected function searchBus_clickHandler(event:MouseEvent):void
			{
				this.busresult.location_grid.visible=false;
				_busCom.getBusChangeRlt(this.start.text,this.stop.text,onGetBusRlt);
				this.busresult.busResult.removeAllChildren();
				clearAllRoad();
			}
			
			/**
			 *获取公交换乘方案回调函数
			 */
			public function onGetBusRlt(e:Event):void
			{
				var data:String = URLLoader(e.target).data;
				SearchBusWay_CallBack(data);
			}
			
			/**
			 *处理公交换乘的结果
			 */
			public function SearchBusWay_CallBack(response:String):void
			{			
				if (response == null || response == "")
				{
					Alert.show("没有查到线路！");
					return;
				}
				if(!this.imsmap.activeMapDoc)
				{
					Alert.show("请切换到2D视图再进行公交搜索！","提示");
					return;
				}
				this._road = new Array();
				var busWayAnly:Array = new Array();
				var divHtml:String = '';
				
				if (response.indexOf('$') != -1)
				{
					busWayAnly = response.split('$');  //方案数组
				}
				else
				{
					busWayAnly[0] = response;
				}
				var lengthTmp:int = busWayAnly.length;
				for (var i:int = 0 ; i < lengthTmp ; i++)
				{ 
					var stopInfo:String				= "";
					var busLin:String				= "";
					var busStopName:String			= "";
					var wayRecom:int				= 0;
					var dtHtml:String				= "";      //dt元素
					var ddHtml:String				= "";      //dd元素
					var length:int					= 0;       //线路总长
					var hcTimes:int					= 0;      //换乘次数
					var curtail:String				= "";     //简略的换乘方案
					var walkLength:Number			= 0;   //行走距离
					var busStopsCount:int			= 0;//一个换乘方案的车站站点计数
					var tmpSpecialNodeArray:Array	= new Array();//暂时存放特殊站点的Array，结构为Node
					var tmpNormalNodeArray:Array	= new Array();//暂时存放普通站点的Array，结构为Node
					var stopsSeq:int				= -1;              //标识一个乘车方案的车站站点序列,0为起点序列
					var lstStopName:String			= "";          //记录最后一个站点的名称
					var lstStopX:Number				= -1;
					var lstStopY:Number				= -1;
					var isStartWalked:int			= -1;          //标识是否在起点车站步行
					var busTitleBox:HBox			= new HBox();
					var busRoadLabel:Text			= new Text();
					if(busWayAnly[i] == null)
					{
						continue;
					}
					var oneBusWay:Array = busWayAnly[i].split("#");//一个方案中的所有公交路线
					
					busRoadLabel = busTitleBox.addChild(busRoadLabel) as Text;
					busTitleBox.addChild(getRoadShowButton(i));
					this.busresult.busResult.addChild(busTitleBox);
					
					var roadLenInfo:Text = new Text();
					roadLenInfo = this.busresult.busResult.addChild(roadLenInfo) as Text;
					
					this._road[i] = new IMSRoad();
					this._road[i].imsmap = this.imsmap;
					
					for (var j:int = 0 ; j < oneBusWay.length-1 ; j++)
					{
						if (oneBusWay[j] == null || oneBusWay[j] == "")
						{
							continue;
						}
						var oneBusName:String = oneBusWay[j].split("|")[0]; //一条公交线路的名称
						
						if (oneBusWay[j].split("|")[1] == null || oneBusWay[j].split("|")[1] == "")
						{
							continue;
						}
						var oneStopInfo:String = oneBusWay[j].split("|")[1].split("@")[0]; //一条公交路线的所有车站名称及坐标数组
						
						if (oneStopInfo == null || oneStopInfo == "")
						{
							continue;
						}
						var tmpStopInfo:Array=new Array();
						 tmpStopInfo = oneStopInfo.split(",");   //存放站点名称坐标数组
						var oneBusLin:String = oneBusWay[j].split("|")[1].split("@")[1];   //一条公交线路的坐标
						var oneStartStop:String = tmpStopInfo[0];
						var oneStartStopX:Number = tmpStopInfo[1];
						var oneStartStopY:Number = tmpStopInfo[2];
						var oneLastStop:String = tmpStopInfo[tmpStopInfo.length-3];    //一条线路终止站点
						var oneLastStopX:Number = tmpStopInfo[tmpStopInfo.length-2];
						var oneLastStopY:Number = tmpStopInfo[tmpStopInfo.length-1];
						stopInfo += oneStopInfo + "@";   //一套方案中的所有车站信息
						wayRecom = (oneStopInfo.split(",").length/3)-1;    //一条线路经过的车战数
						busLin += oneBusLin + ",";
						var fx = checkdirction(oneStartStopX,oneStartStopY,oneLastStopX,oneLastStopY);
						if (oneBusName == "" || oneBusName == undefined)
						{//需要步行
							if (j == 0)
							{//起点车站需要步行
								var walk1box:VBox=new VBox();
								var walkBox:HBox = new HBox();
								isStartWalked = 1;
								stopsSeq++;
								tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,0));  //起点车站需要步行，只标识其为起点
								IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/walk.gif");
								walkLength = parseFloat(getLength(oneBusLin).toFixed(1));
								walkBox.addChild(getImage("image/bus/walk.gif"));
								walkBox.addChild(getLinkButton(oneStartStop,oneStartStopX,oneStartStopY));
								walkBox.addChild(getHtmlText('出发往<font color="red">' + fx + '</font>方向行走约<font color="red">'+ walkLength+'</font>米'));
								walk1box.addChild(walkBox);
								walkBox=new HBox();
								if (oneStartStop == oneLastStop)
									walkBox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至附近同名站点'));
								else
									walkBox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至'));
								walkBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
								walk1box.addChild(walkBox);
								this.busresult.busResult.addChild(walk1box);
								if(oneLastStop==stop.text)
									this.busresult.busResult.addChild(getFlashShowButton(i));
							}
							else if (j == oneBusWay.length-2)   //终点车站需要步行
							{
								var endWalkBox:HBox = new HBox();
								stopsSeq++;
								tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,3));
								IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/walk.gif");
								walkLength = parseFloat(getLength(oneBusLin).toFixed(1));
								endWalkBox.addChild(getImage("image/bus/walk.gif"));
								endWalkBox.addChild(getHtmlText('往'+fx+'方向行走约<font color="red">'+walkLength+'</font>米至'));
								endWalkBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
								this.busresult.busResult.addChild(endWalkBox);
								this.busresult.busResult.addChild(getFlashShowButton(i));
							}
							else 
							{//换乘车站间需要步行
								var shiftBox:HBox = new HBox();
								stopsSeq++;
								tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,3));
								IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/walk.gif");
								walkLength = parseFloat(getLength(oneBusLin).toFixed(1));
								shiftBox.addChild(getImage("image/bus/walk.gif"));
								shiftBox.addChild(getHtmlText('从'));
								shiftBox.addChild(getLinkButton(oneStartStop,oneStartStopX,oneLastStopY));
								if (oneStartStop == oneLastStop)
									shiftBox.addChild(getHtmlText('出发往'+fx+'方向走约<font color="0xFF0000">'+walkLength+'</font>米至附近同名站点'));
								else
									shiftBox.addChild(getHtmlText('出发往'+fx+'方向走约<font color="0xFF0000">'+walkLength+'</font>米至'));
								shiftBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
								this.busresult.busResult.addChild(shiftBox);
								
							}
						}
						else if (j == 0)
						{//不需要步行，起点公交车
							hcTimes++;
							curtail += oneBusName.split('(')[0]+"路";
							var bus1box:VBox=new VBox();
							var firstBox:HBox = new HBox();
							firstBox.addChild(getImage("image/bus/qidian.gif"));
							stopsSeq++;//标记为起点序列，值为0
							tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,0));   //标识为起点
							IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/qidian.gif");
							firstBox.addChild(getLinkButton(oneStartStop,oneStartStopX,oneStartStopY)) as LinkButton;
							firstBox.addChild(getHtmlText('乘<font color="#0000FF">'+oneBusName+'</font>'));
							bus1box.addChild(firstBox);
							firstBox=new HBox();
                            firstBox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经<font color="#FF0000">'+wayRecom+'</font>个站点'));
							for (var k = 3 ; k < tmpStopInfo.length - 3 ; k += 3)
							{
								stopsSeq++;
								tmpNormalNodeArray.push(new Node(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,2));
								IMSRoad(this._road[i]).addNode(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,"image/bus/stop.gif");
							}
							firstBox.addChild(getHtmlText('在'));
							firstBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
							firstBox.addChild(getHtmlText('下车'));
							bus1box.addChild(firstBox);
							this.busresult.busResult.addChild(bus1box);
							if(oneLastStop==stop.text)
								this.busresult.busResult.addChild(getFlashShowButton(i));
						}
						else
						{//换乘后的公交车，这里是步行后公交
							hcTimes++;
							var bus2box:VBox=new VBox();
							var busBox:HBox = new HBox();
							if (isStartWalked == 1)
							{
								isStartWalked = -1;
								stopsSeq++;
								tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,1));  //起点车站需要步行，只标识其为乘车点
								IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/bus.gif");
								busBox.addChild(getImage("image/bus/bus.gif"));
								busBox.addChild(getHtmlText('乘<font color="#0000FF">'+oneBusName+'</font>'));
								bus2box.addChild(busBox);
								busBox=new HBox();
                                busBox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经<font color="#FF0000">'+wayRecom+'</font>个站点'));
								for (var k = 3 ; k < tmpStopInfo.length-3 ; k += 3)
								{
									stopsSeq++;
									tmpNormalNodeArray.push(new Node(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,2));
									IMSRoad(this._road[i]).addNode(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,"image/bus/stop.gif");
								}
								busBox.addChild(getHtmlText('在'));
								busBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
								busBox.addChild(getHtmlText('下车'));
								bus2box.addChild(busBox);
								curtail += oneBusName.split('(')[0]+"路";
							}
							else
							{//非步行后公交，即换乘点
								stopsSeq++;
								tmpSpecialNodeArray.push(new Node(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,4));  //标记为换乘点
								IMSRoad(this._road[i]).addNode(tmpStopInfo[0],tmpStopInfo[1],tmpStopInfo[2],stopsSeq,"image/bus/shift.gif");
								busBox.addChild(getImage("image/bus/shift.gif"));
								busBox.addChild(getHtmlText('换乘<font color="#0000FF">'+oneBusName+'</font>'));
								bus2box.addChild(busBox);
								busBox=new HBox();
								busBox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经<font color="#FF0000">'+wayRecom+'</font>个站点'));
								for (var k:Number = 3 ; k < tmpStopInfo.length-3 ; k += 3)
								{
									stopsSeq++;
									tmpNormalNodeArray.push(new Node(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,2));
									IMSRoad(this._road[i]).addNode(tmpStopInfo[k],tmpStopInfo[k+1],tmpStopInfo[k+2],stopsSeq,"image/bus/stop.gif");
								}
								busBox.addChild(getHtmlText('在'));
								busBox.addChild(getLinkButton(oneLastStop,oneLastStopX,oneLastStopY));
								busBox.addChild(getHtmlText('下车'));
								bus2box.addChild(busBox);
								curtail += '转' +oneBusName.split('(')[0]+"路";
							}
							this.busresult.busResult.addChild(bus2box);
							if(oneLastStop==stop.text)
									this.busresult.busResult.addChild(getFlashShowButton(i));
						}
						var tmpIndex:int = tmpStopInfo.length - 1;
						lstStopName = tmpStopInfo[tmpIndex-2];
						lstStopX = tmpStopInfo[tmpIndex-1];
						lstStopY = tmpStopInfo[tmpIndex];
					}
					stopsSeq++;
					tmpSpecialNodeArray.push(new Node(lstStopName,lstStopX,lstStopY,stopsSeq,5));   //标记为终点车站
					IMSRoad(this._road[i]).addNode(lstStopName,lstStopX,lstStopY,stopsSeq,"image/bus/zhongdian.gif");
					
					IMSRoad(this._road[i])._roadCoorArr = busLin;
					if(hcTimes==0)
					{
						Alert.show("没有搜索到相关线路,请检查连接设置或无此路线信息！","提示");
						var busInfo:String = hcTimes == 1 ? "[直达]" : ('[换乘'+(hcTimes-1)+'次]');
						busRoadLabel.htmlText = '<font size="14px" color="0x000000"><b>'+(i+1).toString()+"."+curtail+busInfo+'</b></font>';
						roadLenInfo.htmlText = '全程约<font color="0xFF0000">'+(getLength(busLin)/1000).toFixed(2)+'</font>公里';
					}
					else
					{
					   var busInfo:String = hcTimes == 1 ? "[直达]" : ('[换乘'+(hcTimes-1)+'次]');
					   busRoadLabel.htmlText = '<font size="14px" color="0x000000"><b>'+(i+1).toString()+"."+curtail+busInfo+'</b></font>';
					   roadLenInfo.htmlText = '全程约<font color="0xFF0000">'+(getLength(busLin)/1000).toFixed(2)+'</font>公里';
					   if (hcTimes == 1)
					  {
						dtHtml = '<dt><table><tr><td>'+(i+1)+'.<a id="line"'+i+'href="javascript:showDetail"('+busWayAnly.length+','+i+'):">'+curtail+'(显示)</a></td><td align=right><span style=""><font color=red text-align=right>[直达]</font></span></td></tr></table>'+ddHtml;
					  }
					  else
						dtHtml = '<dt>'+(i+1)+'.<a id="line"'+i+'href="javascript:showDetail"('+busWayAnly.length+','+'):">'+curtail+'(显示)</a><span><font color=red>[换乘'+(hcTimes-1)+'次]</font></span>'+ddHtml;
					  dtHtml += '<p style="boder-top:#ccc 1px solid;width:180px;margin-left:26px;text-align:center">';
					  dtHtml += '<img style="CURSOR:hand" alt="开始播放" id="Btn_GO"'+i+'src="image/play.jpg" onclick=carmove"('+i+')>&nbsp;<img style="CURSOR:hand"  id="Btn_STOP"'+i+'alt="停止播放" src="image/stop.jpg" onclick="carstop('+i+')">';
					  dtHtml += '&nbsp;<input id="'+i+'_ck" type="checkbox" onclick="checkchange('+i+')"/><font color=blue>显示所有站点</font></p></div>';
					  divHtml += dtHtml;
					}
				}
				showRoad(0);
				divHtml += '</dl>';
				this.busresult.visible=true;
				this.busresult.busResult.visible=true;
			}
			
			/**
			 * 根据坐标判断方向
			 */ 
			function checkdirction(sx:Number,sy:Number,ex:Number,ey:Number):String
			{
				var dir = "";
				if(ex > sx)
					dir += "东";
				if(ex < sx)
					dir += "西";
				if(ey > sy)
					dir += "北";
				if(ey < sy)
					dir += "南";
				return dir;    
			}
			
			//str线路坐标串，以逗号隔开(x1,y1,x2,y2,x3,y3...........)
			/**
			 * 计算线路全程长度
			 */ 
			function getLength(str:String):Number {
				var length:Number = 0;
				if(str == null||str == "")
				{
					return 0;
				}
				var coordinateXY = str.split(',');
				for(var k:int = 0; k < coordinateXY.length; k += 2) 
				{
					if (k + 3 < coordinateXY.length) 
					{
						var x1:Number = coordinateXY[k];
						var y1:Number = coordinateXY[k + 1];
						var x2:Number = coordinateXY[k + 2];
						var y2:Number = coordinateXY[k + 3];
						length += Math.sqrt(Math.pow(x2-x1,2) + Math.pow(y2-y1,2));
					}		
				}
				return length*111000;
			}
			
			/**
			 * 对换乘的公交站点定位
			 */ 
			private function getLinkButton(buttonLabel:String,linkx:Number,linky:Number):LinkButton
			{
				var busLink:LinkButton = new LinkButton();
				busLink.setStyle("paddingLeft",0);
				busLink.setStyle("paddingRight",0);
				busLink.setStyle("color",0x0000FF);
				busLink.setStyle("fontfamily","微软雅黑");
				busLink.label = buttonLabel;
				busLink.addEventListener(MouseEvent.CLICK,function(e:Event):void{location(buttonLabel,linkx,linky);});
				return busLink;
			}
			
			/**
			 *热点定位
			 */
			public function location(name:String,x:Number,y:Number):void
			{
				this.imsmap.panTo(x,y);
				var xc:Point=this.imsmap.cenPntScrCoor;
				if(!stopbox)
				{
					//如果没有创建信息提示框，进行创建
					stopbox=new stopInfo();
					stopbox.addEventListener(FlexEvent.CREATION_COMPLETE,function(e:FlexEvent):void{
						stopbox.title=name;
						stopbox.stop_name.text=name;
						stopbox.stop_X.text=String(x);
						stopbox.stop_Y.text=String(y);
						stopbox.x=xc.x;
						stopbox.y=xc.y;	
						stopbox.visible=true;
					});
					this.imsmap.addChild(stopbox);	
				}
				else
				{
					//已经创建了信息提示框，直接更新提示框的内容
					stopbox.title=name;
					stopbox.stop_name.text=name;
					stopbox.stop_X.text=String(x);
					stopbox.stop_Y.text=String(y);
					stopbox.x=xc.x;
					stopbox.y=xc.y;
					stopbox.visible=true;
				}			
			}
			
			/**
			 *设置显示公交线路按钮
			 */
			private function getRoadShowButton(roadIndex:int):LinkButton
			{
				var busLink:LinkButton = new LinkButton();
				
				busLink.label = "显示";
				busLink.addEventListener(MouseEvent.CLICK,function(e:Event):void{showRoad(roadIndex);});
				return busLink;
			}
			
			/**
			 *绘制公交线路
			 */
			public function showRoad(roadIndex:int):void
			{
				var roadNum:int = this._road.length;
				
				for (var i:int = 0 ; i < roadNum ; i++)
				{
					if (roadIndex == i)
						IMSRoad(this._road[i]).drawRoad();
					else
						IMSRoad(this._road[i]).clear();
				}
			}
			
			/**
			 *清除公交路线
			 */
			public function clearAllRoad():void
			{
				for (var i:int = 0 ; i < this._road.length ; i++)
				{
					IMSRoad(this._road[i]).dispose();
					if (this.imsmap.contains(this._road[i]))
					{
						IMSRoad(this._road[i]).clear();
						this.imsmap.removeChild(this._road[i]);
						
					}
				}
				this._road=new Array();
			}
			private function hideAllRoad():void
			{
				var roadNum:int = this._road.length;
				for (var i:int = 0 ; i < roadNum ; i++)
				{
					IMSRoad(this._road[i]).clear();
				}
			}
			
			/**
			 *设置播放动画按钮
			 */
			private function getFlashShowButton(roadIndex:int):LinkButton
			{
				var busLink:LinkButton = new LinkButton();
				
				busLink.label = "播放";
				busLink.addEventListener(MouseEvent.CLICK,function(e:Event):void{showFlash(roadIndex);});
				return busLink;
			}
			
			/**
			 *播放公交动画
			 */
			public function showFlash(roadIndex:int):void
			{
				var roadNum:int=this._road.length;
				for (var i:int = 0 ; i < roadNum ; i++)
				{
					if(roadIndex == i)
						IMSRoad(this._road[i]).showFlash();
					else
						IMSRoad(this._road[i]).clear();
				}
			}
			
			/**
			 *设置换乘的图标
			 */
			private function getImage(src:String):Image
			{
				var img:Image = new Image();
				
				img.source = src;
				img.width = 24;
				img.height =24;
				return img;
			}
			
			/**
			 *获取文本值
			 */
			private function getHtmlText(html:String):Text
			{
				var text:Text = new Text();
				text.htmlText = html;
				return text;
			}			
			
			/**清空公交换乘结果
			 */
			protected function resetBus_clickHandler(event:MouseEvent):void
			{
				this.clearAllRoad();
				this.busresult.busResult.removeAllChildren();
				this.busresult.busResult.visible=false;
			}
			
			/**
			 *自驾窗口初始化
			 */
			protected function search_car_clickHandler(event:MouseEvent):void
			{
				this.busresult.roadResult.removeAllChildren();
				this.busresult.location_grid.visible=false;
				this.busresult.busResult.visible=false;
				if (this.imsmap==null)
				{
					Alert.show("imsmap属性未赋值","提示");
					return;
				}
				this.road=new IMSRoad();
				this.road.imsmap=this.imsmap;
				vectorObj=this.imsmap.activeMapDoc;
				if(!this.imsmap.activeMapDoc)
				{
					Alert.show("请切换到2D视图再进行自驾搜索！","提示");
					return;
				}
				clearAllRoad();
				clearMarker();
				resetcar();
			}
			
			/**
			 *自驾搜索输入框初始化
			 */
			protected function start1_clickHandler(event:MouseEvent):void
			{
				start1.text="";
				if(this.road)
				    resetcar();
			}
			
			/**
			 *自驾搜索输入框初始化
			 */
			protected function stop1_clickHandler(event:MouseEvent):void
			{
				stop1.text="";
				if(this.road)
				    resetcar();
			}

            /**
			 *自驾搜索
			 */
			protected function searchCar_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				_busCom.getBusChangeRlt(this.start1.text,this.stop1.text,onGetBusRlt1);
				this.busresult.roadResult.removeAllChildren();
				resetcar();
				clearAllRoad1();
			}
			
			/**
			 * 获取自驾方案回调函数
			 */ 
			public function onGetBusRlt1(e:Event):void
			{
				var data:String = URLLoader(e.target).data;
				SearchCarWay_CallBack(data);
			}
			/**
			 * 处理自驾的结果
			 */ 
			public function SearchCarWay_CallBack(response:String):void
			{
				if (response == null || response == "")	
				{		
					Alert.show("没有查到线路!")	;	
					return;
				}
				this.road.clear();
				this.road._roadCoorArr = "";
				var busWayAnly:Array = new Array();
				this.pathDots="";
				var divHtml:String = '' ;
				
				if(response.indexOf('$') != -1)
				{
					busWayAnly = response.split('$');  //方案数组
				}
				else
				{
					busWayAnly[0] = response;
				}
				var lengthTmp:int = busWayAnly.length;
				var oneBusWay:Array = busWayAnly[0].split("#");//一个方案中的所有公交路线
				var oneStopInfo:String	= oneBusWay[0].split("|")[1].split("@")[0];//一条公交路线的所有车站名称及坐标数组
				tmpStopInfo1	= new Array();
				tmpStopInfo1 = oneStopInfo.split(",");//存放站点名称坐标数组
						
				var dotStr1:String=this.tmpStopInfo1[1]+','+this.tmpStopInfo1[2]+',';
				var dotStr2:String=this.tmpStopInfo1[tmpStopInfo1.length-2]+','+this.tmpStopInfo1[tmpStopInfo1.length-1]+',';
				pathDots=dotStr1+dotStr2;
				
				if (this.vectorObj == null)
				{
					Alert.show("数据连接失败，请检查连接客户端设置。", "提示");
					return;
				}
				var gdb:CGdbInfo = new CGdbInfo();
				gdb.GDBName = this.GDBName;
				gdb.GDBSvrName = this.GDBSvrName;
				gdb.Password = this.Password;
				gdb.User = this.User;
				var obj:CNetAnalyse = new CNetAnalyse();
				obj.GdbInfo = gdb;
				obj.NetLayerName = this.NetLayerName;
				obj.RequestDots = this.pathDots.substring(0, this.pathDots.length - 2);
				obj.NearDis = 0.002;
				obj.FlgType = "line";
				obj.NetWeight = ",Weight1,Weight1";
				this._spacial = new SpacialAnalyse(this.vectorObj);
				this._spacial.netAnalyse(obj, onSubmit);								
			}
			
			public function onSubmit(e:Event):void
			{
//				this.road.clear();
				var obj:CPathAnalyzeResult = this._spacial.onNetAnalyse(e);
				if (obj == null || obj.Paths == null)
					return;
				var path:CNetPath = CNetPath(obj.Paths[0]);
				var edgeNum:int = path.Edges.length;
				var roadBox:VBox=new VBox();
				var qibox:HBox=new HBox();
				qibox.addChild(getHtmlText('<b>1.</b><font color="#FF0000"><b>从起点</b></font>('));
				qibox.addChild(getLinkButton(start1.text,tmpStopInfo1[1],tmpStopInfo1[2])) as LinkButton;
				qibox.addChild(getHtmlText(')<font color="#FF0000"><b>出发</b></font>'));
				roadBox.addChild(qibox);
				for (var i:int = 0; i < edgeNum-1; i++)
				{
					var edge:CNetEdge = CNetEdge(path.Edges[i]);
					var edge1:CNetEdge=CNetEdge(path.Edges[i+1]);
					if(i==0)
					{
						var dots:Dot_2D=Dot_2D(edge1.Dots[0]);
						var robox:HBox=new HBox();
						robox.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;经'));
						robox.addChild(getLinkButton(edge.FieldValus[2],dots.x,dots.y));
						roadBox.addChild(robox);	
					}
					if (i != edgeNum - 2)
					{
						if(edge.FieldValus[2]!=edge1.FieldValus[2]&&edge1.FieldValus[2]!="")
						{
							var dots1:Dot_2D=Dot_2D(edge1.Dots[0]);
							var robox1:HBox=new HBox();
							robox1.addChild(getHtmlText('&nbsp;&nbsp;&nbsp;到达'));
							robox1.addChild(getLinkButton(edge1.FieldValus[2],dots1.x,dots1.y));
							roadBox.addChild(robox1);
						}
					}
					else 
					{
							var dots4:Dot_2D=Dot_2D(edge1.Dots[0]);
							var robox4:HBox=new HBox();
							robox4.addChild(getHtmlText('<font color="#FF0000"><b>到达终点</b></font>('));
							robox4.addChild(getLinkButton(stop1.text,tmpStopInfo1[tmpStopInfo1.length-2], tmpStopInfo1[tmpStopInfo1.length-1]));
							robox4.addChild(getHtmlText(')'));
							roadBox.addChild(robox4);
					}
					var dotNum:int = edge.Dots.length;
					for (var j:int = 0; j < dotNum; j++)
					{
						var dot:Dot_2D = Dot_2D(edge.Dots[j]);
						this.road._roadCoorArr += dot.x + "," + dot.y + ",";
					}
					this.road.addNode(edge.FieldValus[2], Dot_2D(edge.Dots[Math.floor(dotNum / 2)]).x, Dot_2D(edge.Dots[Math.floor(dotNum / 2)]).y, 0, "image/bus/stop.gif");
				}
				this.road._roadCoorArr = this.road._roadCoorArr.substring(0, this.road._roadCoorArr.length - 2);
				this.road.addNode("起点", tmpStopInfo1[1], tmpStopInfo1[2], 0, "image/bus/qidian.gif", false);
				this.road.addNode("终点", tmpStopInfo1[tmpStopInfo1.length-2], tmpStopInfo1[tmpStopInfo1.length-1], 0, "image/bus/zhongdian.gif", false);
				this.busresult.roadResult.addChild(roadBox);
				var but:Button=new Button();
				but.label="播放";
				but.addEventListener(MouseEvent.CLICK,onFlashClick);
				this.busresult.roadResult.addChild(but);
				this.road.drawRoad();	
				this.busresult.visible=true;
				this.busresult.roadResult.visible=true;
			}
		
			//自驾路径动画播放按钮
			private function onFlashClick(e:MouseEvent):void
			{
				this.road.showFlash();
			}
			/**
			 *清除自驾路线
			 */
			public function clearAllRoad1():void
			{
//				for (var i:int = 0 ; i < this._road.length ; i++)
//				{
//					IMSRoad(this._road[i]).dispose();
//					if (this.imsmap.contains(this._road[i]))
//						this.imsmap.removeChild(this._road[i]);
//				}
//				this._road=new Array();
			}
			
			/**
			 *清除自驾结果
			 */
			public function resetcar():void
			{
				this.road.clear();
				this.road._roadCoorArr = "";
				this.road._stopIcon = new Array();
				this.busresult.roadResult.removeAllChildren();
				clearPathDot();
			}
			
			/**
			 * 清除自驾路径点
			 */ 
			public function clearPathDot():void
			{
				this.pathDots = "";
				var mark:Array = this.imsmap.getChildren();
				for (var i:int = 0; i < mark.length; i++)
				{
					if (mark[i] is Marker&&UIComponent(mark[i]).name == "路径点")
						this.imsmap.removeChild(mark[i]);
				}
			}
			
			/**
			 *本地搜索窗口初始化
			 */
			protected function search_location_clickHandler(event:MouseEvent):void
			{
				this.busresult.busResult.visible=false;
				this.busresult.roadResult.visible=false;
				if(!this.imsmap.activeMapDoc)
				{
					Alert.show("请切换到2D视图再进行本地搜索！","提示");
					return;
				}
				if(this.road)
					resetcar();   //清除自驾轨迹
				clearAllRoad();   //清除公交换乘轨迹
			}
			
			/**本地搜索输入框初始化
			 */
			protected function keyword_clickHandler(event:MouseEvent):void
			{
				keyword.text="";
			}
			
			/**
			 *本地搜索关键字文本发生变化处理函数
			 */
			public function onTextChange(key:String):void
			{
				this.busresult.location_grid.removeAllChildren();
				this.busresult.location_grid.visible=false;
			}
			
			/**
			 *本地搜索
			 */
			public function searchLocation_submit():void
			{
				this.busresult.location_grid.removeAllChildren();
				sendRequest();    //调用Web查询请求方法
			}
					
			//发送Web请求处理函数
			private function sendRequest():void
			{
				//web查询的方法
				var oper:AbstractOperation = web.getOperation("GetDataset");
				oper.send(keyword.text);   //发送请求
				web.addEventListener(ResultEvent.RESULT,onResult);  //web服务返回结果监听事件
				web.addEventListener(FaultEvent.FAULT,onFault);     //web查询出错监听事件
			}
			
			//web服务返回结果处理函数：反序列化结果数据
			private function onResult(event:ResultEvent):void
			{
				var result:Object=event.result as Object;  //获取服务返回的结果
				var table:ObjectProxy=result.Tables as ObjectProxy;
				var row:ObjectProxy=table.Table as ObjectProxy;
				var rows:ArrayCollection=row.Rows as ArrayCollection;
				clearMarker();    //清除上次查询图上的标注
				for(var i:int=0;i<rows.length;i++)
				{
					var data:Object=rows[i] as Object;
					var point:Point=new Point();
					point.x=data.X;
					point.y=data.Y;
					var placeName:String=data.placeName;
					//调用添加标注方法：将地名、逻辑坐标传给方法的参数
					addMark(placeName,point.x,point.y,false);
					this.busresult.location_grid.addChild(getLinkButton(placeName,point.x,point.y));
				}
				this.busresult.visible=true;
				this.busresult.location_grid.visible=true;
			}
			
			//web服务返回错误处理函数
			private function onFault(event:FaultEvent):void
			{
				var s:String=event.message.toString();
				Alert.show(s);
			}
			
			//在地图上标注查询到地点处理函数，参数name为地点名称；参数logisX,logicY为经纬坐标
			public function addMark(name:String,logicX:Number,logicY:Number,showName:Boolean=true):void
			{
				var stopNode:Marker=new Marker();
				stopNode.name="点";   //设置添加的标注的name属性
				stopNode.toolTip=name;//添加标注提示信息为地名
				stopNode.logicX=logicX;
				stopNode.logicY=logicY;
				stopNode.setIconSrc("image/mark/p2.gif");   //标注的图片路径
				stopNode.visible=true;
				stopNode.enableShowName=showName;  //显示地名
				stopNode.imsmap=this.imsmap;   //关联到地图容器
				stopNode.updatePosition();     //更新标注
				this.imsmap.addChildAt(stopNode,this.imsmap.layerLenth+2);   //标注添加到地图容器中
			}
			
			/**
			 *清除上次查询到的地点在图上的标注处理函数
			 */
			public function clearMarker():void
			{
				var mark:Array=this.imsmap.getChildren();
				//清除地图上的标注
				for (var i:int=0;i<mark.length;i++)
				{
					if(UIComponent(mark[i]).name=="点")
						this.imsmap.removeChild(mark[i]);   //调用地图容器的清除方法
				}
			}

		]]>
	</mx:Script>
</IMSWindow>	
