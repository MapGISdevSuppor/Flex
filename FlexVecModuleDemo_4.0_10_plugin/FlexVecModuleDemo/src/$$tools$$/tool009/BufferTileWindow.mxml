<?xml version="1.0" encoding="utf-8"?>
<components:BasicTileWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
							width="242" height="202" x="950" y="100" title="缓冲分析窗口" fontFamily="宋体" fontSize="12">
	<components:layout>
		<s:BasicLayout/>
	</components:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import Mapgis7.WebService.BasLib.CBufferFeature;
			import Mapgis7.WebService.BasLib.CGdbInfo;
			import Mapgis7.WebService.BasLib.CGetObjByID;
			import Mapgis7.WebService.BasLib.CLayerAccessInfo;
			import Mapgis7.WebService.BasLib.CLayerGetByID;
			import Mapgis7.WebService.BasLib.CLayerInfo;
			import Mapgis7.WebService.BasLib.COpenLayer;
			import Mapgis7.WebService.BasLib.COperResult;
			import Mapgis7.WebService.BasLib.EXClsType;
			import Mapgis7.WebService.BasLib.SFeatureGeometry;
			
			import config.ServerIP;
			
			import mx.controls.Alert;
			
			import utilEvent.ReadURLEvent;
			
			import zdims.event.IMSMapEvent;
			import zdims.map.IMSMap;
			import zdims.map.VectorLayer;
			import zdims.map.VectorMapDoc;
			import zdims.util.RectBound;
			private  var bufferName:String;
			private var _vLayer:VectorLayer;
			private var BufferArr:Array=new Array();
			public var SuccessFlag:Boolean=true;
			
			public var mymap:IMSMap;
			public var mapDoc:VectorMapDoc;
			public var bufferModule:BufferModule;
			public var basicApp:FlexVecModuleDemo;
			private var bufLayerName:String="世界政区.wp";
		
			//地图加载完成时调用，使地图定位到某一点
			public function initWindow():void{
				this.mymap.panTo(499550.22488755547,591904.0479760123);
			}
			private function getFeatureLayerIndex(layerNameStr:String):int{
				
				var  layerNodeCount:int = mapDoc.loadMapResult.LayerCount;
				var layerAccessArry:Array = new Array(layerNodeCount);
				layerAccessArry = mapDoc.loadMapResult.LayerAccessInfo.LayerAccessInfo;
				var mapLayerInfoArry:Array = mapDoc.loadMapResult.MapLayerInfo;
				var layerIndex:int=-1;
				for (var i:int = 0; i < layerNodeCount; i++)
				{
					
					var layerAccess:CLayerAccessInfo = layerAccessArry[i] as CLayerAccessInfo;
					var layerInfo:CLayerInfo = layerAccess.LayerInfoList[0] as CLayerInfo;
					var layerName:String = layerInfo.LayerDataName;
					if(layerName==layerNameStr){
						layerIndex=i;
						break;
					}
					
				}
				return layerIndex;
			}
			//缓冲分析的方法
			private function onclick():void{
				//this.mymap.panTo(114.36698117873806,30.614603627099747);
				
				var bufFeatureLayerIndex:int=getFeatureLayerIndex(bufLayerName);
				if(bufFeatureLayerIndex==-1){
					Alert.show("该地图文档中没有"+bufLayerName+"的图层");
					return;
				} 
				
				
				if(SuccessFlag==true){
					bufferName="";
					// CGetObjByID根据要素id获取需要的数据
					var targetObj:CGetObjByID=new CGetObjByID();
					targetObj.FeatureID=176;	//96	
					targetObj.LayerIndex=bufFeatureLayerIndex;
					//CBufferFeature根据要素id设置缓冲分析的函数参数 的对象
					var BufferInfo:CBufferFeature=new CBufferFeature();
					//设置缓冲分析半径 
					BufferInfo.BufferRadius=new Number(this.radius.text);
					//设置要素id的信息（包括所在gdb索引及图层索引等）
					BufferInfo.FeatureInfo=targetObj;
					//设置生成的结果图层名称
					BufferInfo.ResultLayerName="ZLBUF"+Math.random();
					bufferName=BufferInfo.ResultLayerName;
					//要素缓冲分析
					this.mapDoc.bufferFeature(BufferInfo,getBufferFeature);
					SuccessFlag=false;
				}
			}
			//缓冲分析回调函数
			private function getBufferFeature(e:Event):void{
				//获取缓冲区分析结果
				var obj:COperResult=this.mapDoc.onBufferFeature(e);
				if(obj.OperResult){
					//设置类型为简单要素类
					var layerType:String = EXClsType.SFeatureCls;
					var SAddress:String=this.mapDoc.serverAddress;
					//显示缓冲分析后的图层
					showBufferInfo(bufferName,layerType,SAddress);
				}else{
					Alert.show("缓冲分析失败");
				}
			}
			//缓冲分析后的图层显示函数
			private function showBufferInfo(layerName:String, layerType:String, svrAddr:String="127.0.0.1:5141",gdbSvr:String="MapGisLocal", gdbName:String="IMSWebGISGDB", usr:String="", psw:String=""):void
			{
				//CGdbInfo gdb信息类 
				var gdbinfo:CGdbInfo=new CGdbInfo();
				gdbinfo.GDBName=gdbName;
				gdbinfo.GDBSvrName=gdbSvr;
				gdbinfo.User="";
				gdbinfo.Password="";
				//CLayerAccessInfo 图层访问信息类
				var layerAccessInfo:CLayerAccessInfo=new CLayerAccessInfo();
				layerAccessInfo.GdbInfo=gdbinfo;
				//CLayerInfo图层信息类
				var layerInfo:CLayerInfo=new CLayerInfo();
				layerInfo.LayerDataName=layerName;
				layerInfo.LayerType=layerType;
				layerAccessInfo.LayerInfoList[0]=layerInfo;
				//COpenLayer设置要叠加打开的图层信息
				var openLayer:COpenLayer=new COpenLayer()
				openLayer.LayerAccessInfo[0]=layerAccessInfo;
				//实例化矢量图层
				this._vLayer=new VectorLayer();
				this._vLayer.serverAddress=svrAddr;
				this.mymap.addChild(this._vLayer);
				this._vLayer.alpha=0.6;
				//loadLayer()加载图层的方法
				this._vLayer.loadLayer(openLayer, onSingleLayerLoad);	
			}
			//加载图层回调函数	
			private function onSingleLayerLoad(e:Event):void{
				var rlt:COperResult=this._vLayer.onLoadLayer(e);
				if(rlt.OperResult){
					SuccessFlag=true;
					BufferArr.push(this._vLayer);
					this.mymap.refresh();
				}
			}
			//清除缓冲分析的图层
			private function clear():void{
				if(BufferArr.length>0){
					for(var i:int=0;i<BufferArr.length;i++){
						this.mymap.removeElement(BufferArr[i]);
					}
					BufferArr=new Array();
					SuccessFlag=true;
				}
			}
			//进度条end	
			public override function close():void{
				if(SuccessFlag==true){
				clear();
				if(bufferModule){
  						if(this.basicApp){
							this.basicApp.main.removeElement(this.bufferModule.bufferTileWindow);
							this.bufferModule.bufferTileWindow=null;
						}
				}
				
				}else{
					Alert.show("正在缓冲分析...请在缓冲分析完成后操作!");	
					return;
				}
			}
			public override function onMouseUp(e:MouseEvent):void{
				this.basicApp.main.removeElement(this);
				this.basicApp.main.addElement(this);
			}
		]]>
	</fx:Script>
	<mx:VBox width="100%" height="185" label="缓冲分析">
		<s:Group width="100%" height="173">
			<s:VGroup  width="244" height="199">
				<s:HGroup width="100%" height="40" gap="10" verticalAlign="middle" paddingLeft="20"  >
					<s:Label fontWeight="bold" fontSize="15" fontFamily="黑体"    text="缓冲要素ID:"   width="91" height="16"/> 
					<s:Label  text="176" /> 
				</s:HGroup>
				<s:HGroup width="100%" height="40" gap="10" verticalAlign="middle" paddingLeft="20">
					<s:Label fontWeight="bold" fontSize="15" fontFamily="黑体"  text="缓冲半径:"  width="91" height="16"/> 
					<s:TextInput id="radius"   text="10000" width="112" enabled="false"/>
				</s:HGroup>
				
				<s:HGroup width="100%" height="50" gap="30" verticalAlign="middle" paddingLeft="20">
					<s:Button  label="缓冲区分析"  click="onclick()" height="30"  fontSize="13" fontWeight="bold"/>
					<s:Button  label="清除" click="clear()"  height="30"  fontSize="13" fontWeight="bold"/>
				</s:HGroup>
				
			
				
			</s:VGroup>
		</s:Group>
	</mx:VBox>
</components:BasicTileWindow>
