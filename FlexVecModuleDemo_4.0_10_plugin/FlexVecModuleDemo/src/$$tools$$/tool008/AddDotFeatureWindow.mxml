<?xml version="1.0" encoding="utf-8"?>
<components:BasicTileWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
							width="247" height="198" title="添加要素窗口" fontFamily="宋体" fontSize="12" x="30" y="100"> 
	<components:layout>
		<s:BasicLayout/>
	</components:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:GlowFilter id="glower" alpha="1.0" blurX="6.0" blurY="6.0" color="#000000" inner="false"
					  knockout="false" quality="2" strength="1"/>
		<s:GlowFilter id="golowerRight" alpha="1.0" blurX="6.0" blurY="6.0" color="#FFFFFF" inner="false"
					  knockout="false" quality="2" strength="1"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import Mapgis7.WebService.BasLib.*;
			
			import mx.containers.Canvas;
			import mx.containers.HBox;
			import mx.controls.*;
			import mx.events.FlexEvent;
			
			import sjd.managers.ResizeManager;
			
			import spark.components.HGroup;
			import spark.components.VGroup;
			
			import zdims.control.IMSPoint;
			import zdims.control.LineStyle;
			import zdims.control.MapDocDataViewer;
			import zdims.control.PointStyle;
			import zdims.control.PolygonStyle;
			import zdims.draw.IMSCanvas;
			import zdims.drawing.CoordinateType;
			import zdims.drawing.DrawingType;
			import zdims.drawing.GraphicsLayer;
			import zdims.drawing.IMSCircle;
			import zdims.drawing.IMSPolygon;
			import zdims.drawing.IMSPolyline;
			import zdims.interfaces.IGraphics;
			import zdims.interfaces.control.IFeatureStyleEditor;
			import zdims.map.IMSMap;
			import zdims.map.VectorMapDoc;
			import zdims.util.IMSOperType;
			
			private var _featureID:Number = 0;
			private var _targetGeo:Object;
			private var _attStruct:CAttStruct;
			private var _stylebox:HBox = new HBox();
			private var _featureStyle:WebGraphicsInfo;
			private var _styleControl:Object;
			private var _featureGraphic:Array = new Array();
			private var _pointCtrl:Array = new Array();
			public var currentDataViewer:MapDocDataViewer;
			
			public var mapDoc:VectorMapDoc;
			private var graphicsLayer:GraphicsLayer;
			
			public var addDotFeatureModule:AddDotFeatureModule;
			public var basicApp:FlexVecModuleDemo;
			
			private var pointLayerName:String="点图层.wt";
			private var lineLayerName:String="线图层.wl";
			private var polygonLayerName:String="区图层.wp";
			
			/**
			 * 控件初始化
			 */ 
			public override function init():void
			{
				super.init();
				//ResizeManager.enableResize(this, 200);
			}
			/**
			 * 添加点要素处理事件
			 * @param e
			 *
			 */
			public function addPoint(e:Event):void
			{
				onAddFeature(ESFclsGeomType.Pnt);
			}
			/**
			 * 添加点要素处理事件
			 * @param e
			 *
			 */
			public function addPointnew(pnt:Dot_2D):void
			{
				var pntObj:IWebGeometry=pnt as   IWebGeometry;
				onAddFeature1(ESFclsGeomType.Pnt,pntObj);
			}
			
			/**
			 * 添加线要素处理事件
			 * @param e
			 *
			 */
			public function addLine(e:Event):void
			{
				onAddFeature(ESFclsGeomType.Lin);
				
			}
			/**
			 * 添加线要素处理事件
			 * @param e
			 *
			 */
			public function addLinenew(line:AnyLine):void
			{
				var lineObj:IWebGeometry=line as   IWebGeometry;
				onAddFeature1(ESFclsGeomType.Lin,lineObj);
			}
			/**
			 * 添加要素回调函数
			 */ 
			private function onAddFeature(geoType:String):void
			{
				
				if (!this.imsmap.checkActiveLayer())
				{
					return;
				}
				var data:String = this.imsmap.activeMapDoc.getActiveLayerGeoType();
				if (data == null || data == "")
				{
					Alert.show("获取当前图层几何类型失败", "提示");
					return;
				}
				if (data != geoType)
				{
					Alert.show("当前图层不能添加该几何类型的要素", "提示");
					return;
				}
				var obj:Object;
				switch (geoType)
				{
					case ESFclsGeomType.Pnt:
						obj = this.imsmap.graphicCanvas.getSelectedDot();
						break;
					case ESFclsGeomType.Lin:
						obj = this.imsmap.graphicCanvas.getSelectedLine();
						break;
					case ESFclsGeomType.Reg:
						obj = this.imsmap.graphicCanvas.getSelectedPolygon();
						break;
					case ESFclsGeomType.Unknown:
						Alert.show("当前激活图层几何类型未知", "提示");
						return;
						break;
				}
				if (obj == null)
					return;
				this.setTargetFeatureGeo(obj);
				this.getActiveLayerAttStruct();
			}
			
			/**
			 * 添加区要素处理事件
			 * @param e
			 *
			 */
			public function addPolygon(e:Event):void
			{
				onAddFeature(ESFclsGeomType.Reg);
			}
			
			public function addPolygon1(poly:Polygon):void
			{
				onAddFeature1(ESFclsGeomType.Reg,poly);
				//要素空间几何类型 Reg为区
			}
			
			
			private function onAddFeature1(geoType:String,e:IWebGeometry):void
			{
				if (!this.imsmap.checkActiveLayer())
				{
					return;
				}
				var data:String = this.imsmap.activeMapDoc.getActiveLayerGeoType();
				if (data == null || data == "")
				{
					Alert.show("获取当前图层几何类型失败", "提示");
					return;
				}
				if (data != geoType)
				{
					Alert.show("当前图层不能添加该几何类型的要素", "提示");
					return;
				}
				var obj:Object;
				switch (geoType)
				{
					case ESFclsGeomType.Pnt:
						obj = e as Dot_2D;
						break;
					case ESFclsGeomType.Lin:
						obj = e as   AnyLine;
						break;
					case ESFclsGeomType.Reg:
						obj = e as Polygon ;
						break;
					case ESFclsGeomType.Unknown:
						Alert.show("当前激活图层几何类型未知", "提示");
						return;
						break;
				}
				if (obj == null)
					return;
				this.setTargetFeatureGeo(obj);
				this.getActiveLayerAttStruct();
			}
			
			
			/**
			 * 获取激活图层的属性结构
			 *
			 */
			private function getActiveLayerAttStruct():void
			{
				var curLayerAttStru:CAttStruct = this.imsmap.activeMapDoc.getActiveLayerAttStruct();
				if (curLayerAttStru != null)
					this.setAttStruct(curLayerAttStru);
				else
				{
					var obj:CMapIndex = new CMapIndex();
					obj.MapDocIndex = 0;
					obj.LayerIndex = this.imsmap.activeMapDoc.activeLayerIndex;
					this.imsmap.activeMapDoc.getMapLayerAttStruct(obj, this.getAttStructCallBack);
				}
			}
			/**
			 * 获取属性结果回调函数
			 */ 
			private function getAttStructCallBack(e:Event):void
			{
				var attStru:CAttStruct = this.imsmap.activeMapDoc.onGetMapLayerAttStruct(e);
				this.setAttStruct(attStru);
				this.imsmap.activeMapDoc.loadMapResult.layerAttStruct[this.imsmap.activeMapDoc.activeLayerIndex]=attStru;
			}
			
			/**
			 * 设置编辑数据
			 */ 
			public function setTargetFeatureGeo(target:Object):void
			{
				_targetGeo = target;
				this.visible = true;
			}
			/**
			 * 设置属性结构
			 */ 
			public function setAttStruct(attStruct:CAttStruct):void
			{
				setAttStructAndValue(attStruct, null);
			}
			/**
			 * 设置属性结构及属性字段值
			 */ 
			public function setAttStructAndValue(attStruct:CAttStruct, FIDAndValues:Array=null):void
			{
				clearFeaturePoint();
				this.activeControl(null);
				_attStruct = attStruct;
				//	this.removeAllChildren();
				this._editVGroup.removeAllElements();
				this._stylebox.removeAllChildren();
				this._featureStyle = null;
				if (attStruct == null)
					return;
				//2.add each field
				if (FIDAndValues != null && FIDAndValues.length > 0)
				{
					_featureID = FIDAndValues[0];
				}
				var fieldNum:int = attStruct.FldNumber;
				var labelText:Label=new Label();
				labelText.text="属性参数的设置：";
				
				_editVGroup.addElement(labelText);
				for (var i:int = 0; i < fieldNum; i++)
				{
					var hbox:HBox = new HBox();
					hbox.name = "hbox" + i;
					hbox.percentWidth = 100;
					//hbox.paddingLeft=30;
					hbox.x=20;
					var fldName:Label = new Label();
					fldName.text = attStruct.FldName[i].toString().concat(": ");
					fldName.width = 100;
					var fldValue:TextInput = new TextInput();
					fldValue.name = "fldvalue" + i;
					fldValue.text =null;
					
					fldValue.width = 100;
					fldValue.toolTip = attStruct.FldType[i].toString().concat("类型");
					hbox.addChild(fldName);
					hbox.addChild(fldValue);
					//this.addChild(hbox);
					_editVGroup.addElement(hbox);
					//	this.addElement(_editVGroup);
				}
				//add style info
				
				var style:DisplayObject;
				var geoType:String="";
				
				if (FIDAndValues == null)
				{
					geoType=IWebGeometry(this._targetGeo).GetGeomType();
					switch (geoType)
					{
						case EWebGeomType.Point:
							style=new NewPointStyle();
							break;
						case EWebGeomType.Line:
							style=new  NewLineStyle();
							break;
						case EWebGeomType.Polygon:
							style=new NewPolygonStyle();
							break;
					}
					_stylebox.addChild(style);
					this._styleControl=style as Object;
					_stylebox.addChild(new Label());
					_stylebox.addChild(new Label());
					
					//	_stylebox=this._editFeaVGroup.addElement(_stylebox) as HBox;
					//this.addElement(_styleVGroup);
				}
				else
				{
					//get the layer geoType
					var feature:CGetObjByID=new CGetObjByID();
					feature.FeatureID=this._featureID;
					feature.LayerIndex=this.imsmap.activeMapDoc.activeLayerIndex;
					_stylebox=this._editVGroup.addChild(_stylebox) as HBox;
					//this.addElement(_styleVGroup);
					this.imsmap.activeMapDoc.getFeatureStyleInfo(feature, onGetStyle);
				}
				
			}
			/**
			 * 根据要素id获取空间信息
			 */ 
			public function movePoint(e:Event):void
			{
				var getGeo:CGetObjByID=new CGetObjByID();
				getGeo.FeatureID=this._featureID;
				getGeo.LayerIndex=this.imsmap.activeMapDoc.activeLayerIndex;
				this.imsmap.activeMapDoc.getGeomByID(getGeo, drawFeaturePoint);
			}
			/**
			 * 在地图上绘制要素信息
			 */ 
			public function drawFeaturePoint(e:Event):void
			{
				var geoObj:SFeatureGeometry=imsmap.activeMapDoc.onGetGeomByID(e);
				this._targetGeo=geoObj;
				if (geoObj == null)
					return;
				clearFeaturePoint();
				var pntGeoNum:int=geoObj.PntGeom.length;
				var linGeoNum:int=geoObj.LinGeom.length;
				var regGeoNum:int=geoObj.RegGeom.length;
				if (pntGeoNum > 0)
				{
					for (var i:int=0; i < pntGeoNum; i++)
					{
						var dot:Dot_2D=GPoint(geoObj.PntGeom[i]).Dot;
						this.addClientPoint("featurePoint-" + i, dot.x, dot.y, ESFclsGeomType.Pnt);
					}
				}
				else if (linGeoNum > 0)
				{
					for (i=0; i < linGeoNum; i++)
					{
						var line:AnyLine=GLine(geoObj.LinGeom[i]).Line;
						var aNum:int=line.Arcs.length;
						for (var aIndex:int=0; aIndex < aNum; aIndex++)
						{
							var arc:Arc=line.Arcs[aIndex];
							var dotNum:int=arc.Dots.length;
							for (var j:int=0; j < dotNum; j++)
							{
								dot=Dot_2D(arc.Dots[j]);
								this.addClientPoint("featurePoint-" + i + "-" + aIndex + "-" + j, dot.x, dot.y, ESFclsGeomType.Lin);
							}
						}
					}
				}
				else if (regGeoNum > 0)
				{
					var circleNum:int=GRegion(geoObj.RegGeom[0]).Rings.length;
					for (i=0; i < circleNum; i++)
					{
						var circle:AnyLine=AnyLine(GRegion(geoObj.RegGeom[0]).Rings[i]);
						var arcnum:int=circle.Arcs.length;
						for (var a:int=0; a < arcnum; a++)
						{
							var arcOfRing:Arc=circle.Arcs[a];
							dotNum=arcOfRing.Dots.length;
							for (j=0; j < dotNum; j++)
							{
								dot=Dot_2D(arcOfRing.Dots[j]);
								//								if(a==arcnum-1&&j==dotNum-1)
								//									continue;
								//								else
								this.addClientPoint("featurePoint-" + i + "-" + a + "-" + j, dot.x, dot.y, ESFclsGeomType.Reg);
							}
						}
					}
				}
			}
			/**
			 * 清除要素信息
			 */ 
			public function clearFeaturePoint():void
			{
				var lastPntNum:int=this._pointCtrl.length;
				if (lastPntNum > 0)
				{
					for (var p:int=0; p < lastPntNum; p++)
					{
						this.imsmap.removeChild(this._pointCtrl[p]);
						//						this._pointCtrl[p].visible=false;
					}
					this._pointCtrl=new Array();
				}
			}
			/**
			 * 添加要素点
			 */ 
			public function addClientPoint(name:String, logicX:Number, logicY:Number, parentGeoType:String):void
			{
				var point:IMSPoint=new IMSPoint();
				point.name=name;
				point.logicX=logicX;
				point.logicY=logicY;
				point.visible=true;
				point.parentGeoType=parentGeoType;
				point.addEventListener(MouseEvent.MOUSE_UP, onPntMouseUP);
				this._pointCtrl[this._pointCtrl.length]=this.imsmap.addChild(point);
			}
			/**
			 * 移动空间信息点
			 */ 
			public function onPntMouseUP(e:Event):void
			{
				var pnt:IMSPoint=IMSPoint(e.target);
				var pntInfo:Array=pnt.name.split("-");
				var dot:Dot_2D;
				switch (pnt.parentGeoType)
				{
					case ESFclsGeomType.Pnt:
						dot=Dot_2D(SFeatureGeometry(this._targetGeo).PntGeom[pntInfo[1]].Dot);
						dot.x=pnt.logicX;
						dot.y=pnt.logicY;
						break;
					case ESFclsGeomType.Lin:
						dot=Dot_2D(GLine(SFeatureGeometry(this._targetGeo).LinGeom[pntInfo[1]]).Line.Arcs[pntInfo[2]].Dots[pntInfo[3]]);
						dot.x=pnt.logicX;
						dot.y=pnt.logicY;
						break;
					case ESFclsGeomType.Reg:
						dot=Dot_2D(GRegion(SFeatureGeometry(this._targetGeo).RegGeom[0]).Rings[pntInfo[1]].Arcs[pntInfo[2]].Dots[pntInfo[3]]);
						dot.x=pnt.logicX;
						dot.y=pnt.logicY;
						break;
				}
			}
			/**
			 * 获取样式信息回调函数
			 */ 
			public function onGetStyle(e:Event):void
			{
				Alert.show(";;;");
				var gInfo:WebGraphicsInfo=this.imsmap.activeMapDoc.onGetFeatureStyleInfo(e);
				if (gInfo == null)
					return;
				var style:DisplayObject;
				
				this._featureStyle=gInfo;
				switch (gInfo.InfoType)
				{
					case GInfoType.PntInfo:
						style=new PointStyle();
						PointStyle(style).setGraphicStyle(gInfo);
						break;
					case GInfoType.LinInfo:
						style=new LineStyle();
						LineStyle(style).setGraphicStyle(gInfo);
						break;
					case GInfoType.RegInfo:
						style=new PolygonStyle();
						PolygonStyle(style).setGraphicStyle(gInfo);
						break;
				}
				if (style != null)
				{
					this._stylebox.addChild(style);
					this._stylebox.addChild(new Label());
					this._stylebox.addChild(new Label());
				}
				this._styleControl=style as Object;
			}
			/**
			 * 添加要素触发函数
			 */ 
			private function submitForAdd(e:Event):void
			{
				if (!this.imsmap.existActiveMap())
					return;
				var fIno:CMapFeatureInfo=getMapFeatureInfo();
				if(fIno==null)
					return;
				this.imsmap.activeMapDoc.addFeature(fIno, this.getEditOperResult);
			}
			/**
			 * 编辑要素信息回调函数
			 */ 
			public function getEditOperResult(e:Event):void
			{
				
				var rlt:COperResult=this.imsmap.activeMapDoc.onAddFeature(e);
				if (rlt.OperResult == true)
				{
					this.imsmap.activeMapDoc.refresh();
					Alert.show("操作成功", "提示");
					if(this.graphicsLayer){
						this.graphicsLayer.removeAllElements();
					}
					
					this.imsmap.setCurOper(IMSOperType.Drag);
				}
				else
					Alert.show("操作失败，错误信息：" + rlt.ErrorInfo, "提示");
			}
			/**
			 * 编辑触发函数
			 */ 
			private function submitForEdit(e:Event):void
			{
				var fIno:CMapFeatureInfo=getMapFeatureInfo();
				if(fIno==null)
					return;
				if (!this.imsmap.existActiveMap())
					return;
				
				this.imsmap.activeMapDoc.updateFeature(fIno, function(e:Event):void
				{
					onSubmitEdit(e, fIno)
				});
			}
			/**
			 * 编辑要素信息回调函数
			 */ 
			private function onSubmitEdit(e:Event, fInfo:CMapFeatureInfo):void
			{
				var rlt:COperResult=this.imsmap.activeMapDoc.getResultObject(e, "COperResult") as COperResult;
				if (rlt.OperResult)
				{
					Alert.show("修改属性成功", "提示");
					this.currentDataViewer.updateRecord(fInfo.FSet.AttValue);
				}
				else
					Alert.show("修改属性失败，错误信息：" + rlt.ErrorInfo, "提示");
			}
			/**
			 * 获取要素信息
			 */ 
			public function getMapFeatureInfo():CMapFeatureInfo
			{
				var fInfo:CMapFeatureInfo=new CMapFeatureInfo();
				var sf:SFeature=new SFeature();
				for (var i:int=0; i < _attStruct.FldNumber; i++)
				{
					sf.AttValue[i]=TextInput(HBox(this._editVGroup.getChildByName("hbox" + i)).getChildByName("fldvalue" + i)).text;
//					
//					if(this._attStruct.FldName[i]=="ID"){
//						
//						if(sf.AttValue[i]==""||sf.AttValue[i]==null){
//							Alert.show("ID不能为空！");
//							return null;
//						}
//						
//					}
					
					
					
					if(sf.AttValue[i]!=""&&sf.AttValue[i]!=null){
						switch(this._attStruct.FldType[i])
						{
							case "double":
								if(parseFloat(sf.AttValue[i]).toString()=="NaN")
								{
									Alert.show("字段【"+this._attStruct.FldName[i]+"】输入的数据格式不正确。请重新输入！", "提示");
									return null;
								}
								break;
							case "integer":
							case "long":
							case "short":
								if(parseInt(sf.AttValue[i]).toString()=="NaN")
								{
									Alert.show("字段【"+this._attStruct.FldName[i]+"】输入的数据格式不正确。请重新输入！", "提示");
									return null;
								}
								break;
							default:
								break;
						}
					}else{
						
						switch(this._attStruct.FldType[i])
						{
							case "double":
			
								sf.AttValue[i]="0";
								break;
							case "integer":
					
							case "long":
				
							case "short":
								sf.AttValue[i]="0";
								break;
							default:
								break;
						}
					
					}
					
					
					
					
				}
				
				var sfGeo:SFeatureGeometry=null;
				var curFGeoType:String;
				
				if (_targetGeo != null)
				{
					sfGeo=_targetGeo as SFeatureGeometry;
					if (sfGeo == null) //add feature
					{
						sfGeo=new SFeatureGeometry();
						switch (IWebGeometry(_targetGeo).GetGeomType())
						{
							case EWebGeomType.Point:
								sf.ftype=ESFclsGeomType.Pnt;
								var pnt:GPoint=new GPoint();
								pnt.Dot=_targetGeo as Dot_2D;
								sfGeo.PntGeom[0]=pnt;
								break;
							case EWebGeomType.Line:
								sf.ftype=ESFclsGeomType.Lin;
								var line:GLine=new GLine();
								line.Line=_targetGeo as AnyLine;
								sfGeo.LinGeom[0]=line;
								break;
							case EWebGeomType.Polygon:
								sf.ftype=ESFclsGeomType.Reg;
								var polygon:GRegion=new GRegion();
								var circle:AnyLine=new AnyLine();
								circle.Arcs[0].Dots=(_targetGeo as Polygon).Dots;
								polygon.Rings[0]=circle;
								sfGeo.RegGeom[0]=polygon;
								break;
							default:
								sfGeo=null;
								break;
						}
					}
				}
				curFGeoType=this.imsmap.activeMapDoc.getActiveLayerGeoType();
				if (this._featureStyle == null)
				{
					this._featureStyle=new WebGraphicsInfo();
				}
				switch (curFGeoType)
				{
					case ESFclsGeomType.Pnt:
						this._featureStyle.InfoType=GInfoType.PntInfo;
						var newPntStyle:NewPointStyle=this._styleControl as NewPointStyle;
						this._featureStyle.PntInfo=new CPointInfo();
						this._featureStyle.PntInfo.Angle=parseFloat(newPntStyle.patternAngle.text);
						this._featureStyle.PntInfo.Color=parseInt(newPntStyle.patternColor.text);
						this._featureStyle.PntInfo.SymHeight=parseFloat(newPntStyle.patternHeight.text);
						this._featureStyle.PntInfo.SymID=parseInt(newPntStyle.patternID.text);
						this._featureStyle.PntInfo.SymWidth=parseFloat(newPntStyle.patternWidth.text);
						break;
					case ESFclsGeomType.Lin:
						this._featureStyle.InfoType=GInfoType.LinInfo;
						var newLineStyle:NewLineStyle=this._styleControl as NewLineStyle;
						this._featureStyle.LinInfo=new CLineInfo();
						this._featureStyle.LinInfo.Color=parseInt(newLineStyle.color.text);
						this._featureStyle.LinInfo.LinStyleID=parseInt(newLineStyle.patternID.text);
						this._featureStyle.LinInfo.LinStyleID2=parseInt(newLineStyle.patternID2.text);
						this._featureStyle.LinInfo.LinWidth=parseFloat(newLineStyle.penWidth.text);
						this._featureStyle.LinInfo.Xscale=parseFloat(newLineStyle.lineScaleX.text);
						this._featureStyle.LinInfo.Yscale=parseFloat(newLineStyle.lineScaleY.text);
						break;
					case ESFclsGeomType.Reg:
						this._featureStyle.InfoType=GInfoType.RegInfo;
						var newRegStyle:NewPolygonStyle=this._styleControl as NewPolygonStyle;
						this._featureStyle.RegInfo=new CRegionInfo();
						this._featureStyle.RegInfo.FillColor=parseInt(newRegStyle.fillcolor.text);
						this._featureStyle.RegInfo.PatColor=parseInt(newRegStyle.patternColor.text);
						this._featureStyle.RegInfo.PatHeight=parseFloat(newRegStyle.patternHeight.text);
						this._featureStyle.RegInfo.PatID=parseInt(newRegStyle.patternID.text);
						this._featureStyle.RegInfo.OutPenWidth=parseFloat(newRegStyle.patternPenWidth.text);
						this._featureStyle.RegInfo.PatWidth=parseFloat(newRegStyle.patternWidth.text);
						break;
				}
				
				sf.fGeom=sfGeo;
				sf.FID=_featureID;
				fInfo.GInfo=this._featureStyle;
				fInfo.FSet=sf;
				fInfo.LayerIndex=this.imsmap.activeMapDoc.activeLayerIndex;
				fInfo.MapName=new COpenMap();
				fInfo.MapName.MapName[0]=this.imsmap.activeMapDoc.mapDocName;
				return fInfo;
			}
			/**
			 * 关闭窗口
			 */ 
			public function onClose(e:Event):void
			{
				super.close();
				clearFeaturePoint();
			}
			public function oncancle(e:Event):void{
				if(this.graphicsLayer){
					this.graphicsLayer.removeAllElements();
				}
				this._editVGroup.removeAllElements();
				this.imsmap.setCurOper(IMSOperType.Drag);
				
			}
			
			/**
			 * 绘制添加区要素
			 * 
			 */ 
			public function onPolygonclick():void
			{
				var addFeatureLayerIndex:int=getFeatureLayerIndex(polygonLayerName);
				if(addFeatureLayerIndex==-1){
					Alert.show("该地图中没有"+polygonLayerName+"的图层");
					return;
				} 
				
				if(graphicsLayer==null){
					graphicsLayer=new GraphicsLayer();
					this.imsmap.addElement(graphicsLayer);
				}
				this.mapDoc.getMapLayerInfo(addFeatureLayerIndex).LayerStatus=EnumLayerStatus.Editable;
				this.imsmap.activeMapDoc=this.mapDoc;
				this.mapDoc.activeLayerIndex=addFeatureLayerIndex;
				this.mapDoc.updateAllLayerInfo();
				//设置鼠标错做类型为绘制多边形操作
				this.graphicsLayer.drawingType=DrawingType.Polygon;
				this.graphicsLayer.drawingOverCallback=DrawingOverCallback;
			}
			private function DrawingOverCallback(gLayer:GraphicsLayer,graphics:IGraphics,pntArr:Vector.<Point>):void
			{
				this.width=350;
				this.height=300;
				this.mainEdit.visible=false;
				this.setFeatureParam.visible=true;
				
				
				var polygon:IMSPolygon=new IMSPolygon(CoordinateType.Logic);
				
				gLayer.addGraphics(polygon);
				
				var poly:Polygon=new Polygon();
				for(var i:int=0;i<pntArr.length;i++)
				{
					poly.Dots[i]=new Dot_2D(pntArr[i].x,pntArr[i].y);
				}
				poly.Dots[poly.Dots.length-1]=poly.Dots[0];
				this.addPolygon1(poly);
				//this.imsmap.addElement(gLayer);	
			}
			
			private function getFeatureLayerIndex(layerNameStr:String):int{
				
				var  layerNodeCount:int = mapDoc.loadMapResult.LayerCount;
				var layerAccessArry:Array = new Array(layerNodeCount);
				layerAccessArry = mapDoc.loadMapResult.LayerAccessInfo.LayerAccessInfo;
				var mapLayerInfoArry:Array = mapDoc.loadMapResult.MapLayerInfo;
				var layerIndex:int=-1;
				for (var i:int = 0; i < layerNodeCount; i++)
				{
					
					var layerAccess:CLayerAccessInfo = layerAccessArry[i] as CLayerAccessInfo;
					var layerInfo:CLayerInfo = layerAccess.LayerInfoList[0] as CLayerInfo;
					var layerName:String = layerInfo.LayerDataName;
					if(layerName==layerNameStr){
						layerIndex=i;
						break;
					}
					
				}
				return layerIndex;
			}
			
			/**
			 * 添加点
			 */ 
			private function onPntClick():void{
				var addFeatureLayerIndex:int=getFeatureLayerIndex(pointLayerName);
				if(addFeatureLayerIndex==-1){
					Alert.show("该地图中没有"+pointLayerName+"的图层");
					return;
				} 
				
				if(graphicsLayer==null){
					graphicsLayer=new GraphicsLayer();
					this.imsmap.addElement(graphicsLayer);
				}
				
				
				this.mapDoc.getMapLayerInfo(addFeatureLayerIndex).LayerStatus=EnumLayerStatus.Editable;
				this.imsmap.activeMapDoc=this.mapDoc;
				this.mapDoc.activeLayerIndex=addFeatureLayerIndex;
				this.mapDoc.updateAllLayerInfo();
				//设置鼠标错做类型为绘制多边形操作
				this.graphicsLayer.drawingType=DrawingType.Point;
				this.graphicsLayer.drawingOverCallback=DrawingPiontOverCallback;
			}
			private function DrawingPiontOverCallback(gLayer:GraphicsLayer,graphics:IGraphics,pntArr:Vector.<Point>):void
			{
				this.mainEdit.visible=false;
				this.width=350;
				this.height=300;
				this.setFeatureParam.visible=true;
				
				
				var circle:IMSCircle=new IMSCircle(CoordinateType.Logic);
				circle.points=pntArr;
				circle.radius=0.02;
				gLayer.addGraphics(circle);
				var drawPnt:Dot_2D=new Dot_2D();
				drawPnt.x=circle.cenX;
				drawPnt.y=circle.cenY;
				this.addPointnew(drawPnt);
				
				
			}
			/**
			 * 绘制线
			 */
			private function onLineClick():void{
				
				var addFeatureLayerIndex:int=getFeatureLayerIndex(lineLayerName);
				if(addFeatureLayerIndex==-1){
					Alert.show("该地图中没有"+lineLayerName+"的图层");
					return;
				} 
				
				if(graphicsLayer==null){
					graphicsLayer=new GraphicsLayer();
					this.imsmap.addElement(graphicsLayer);
				}
				
				
				this.mapDoc.getMapLayerInfo(addFeatureLayerIndex).LayerStatus=EnumLayerStatus.Editable;
				this.imsmap.activeMapDoc=this.mapDoc;
				this.mapDoc.activeLayerIndex=addFeatureLayerIndex;
				this.mapDoc.updateAllLayerInfo();
				
				this.graphicsLayer.drawingType=DrawingType.Polyline;
				this.graphicsLayer.drawingOverCallback=DrawingLineOverCallback;
				
				
			}
			public function DrawingLineOverCallback(gLayer:GraphicsLayer,graphics:IGraphics,polylineArr:Vector.<Point>):void
			{
				this.mainEdit.visible=false;
				this.width=350;
				this.height=300;
				this.setFeatureParam.visible=true;
				
				var pline:IMSPolyline=new IMSPolyline(CoordinateType.Logic);
				// IMSPolyline折线
				// CoordinateType获取绘制图形的坐标类型，值是CoordinateType枚举类型,默认是屏幕坐标
				gLayer.addGraphics(pline);
				pline.points=polylineArr;
				
				var arcLine:AnyLine=new AnyLine();
				var arc:Arc=new Arc();
				
				//弧段
				for(var i:int=0;i<polylineArr.length;i++)
				{
					arc.Dots[i]=new Dot_2D(polylineArr[i].x,polylineArr[i].y);
					//	arcLine.Arcs[i]=arc;
				}
				arcLine.Arcs[0]=arc;
				this.addLinenew(arcLine);
			}
			
			
			
			public override function close():void{
				if(this.graphicsLayer){
					this.graphicsLayer.removeAllElements();
				}
				
				this.imsmap.setCurOper(IMSOperType.Drag);
				if(addDotFeatureModule){
					this.basicApp.main.removeElement(addDotFeatureModule.addDotFeatureWindow);
					addDotFeatureModule.addDotFeatureWindow=null;
				}
			}
			public override function onMouseUp(e:MouseEvent):void{
				this.basicApp.main.removeElement(this);
				this.basicApp.main.addElement(this);
			}
			
			public function reBackToClickWindow():void{
				if(this.basicApp){
					this.basicApp.imsmap.setCurOper(IMSOperType.Drag);
				}
				
				this.mainEdit.visible=true;
				this.width=247;
				this.height=198;
				this.setFeatureParam.visible=false;
			}
			
			//鼠标移出到绘制的图标上恢复原始效果
			private function rollOutHandler(event:Event):void{
				event.currentTarget.filters=[];
			}
			
			//鼠标移入到绘制的图标上改变颜色的效果
			private function rollRightOverHandler(event:Event):void{
				event.currentTarget.filters=[golowerRight];
			}
			
		]]>
	</fx:Script>
	<mx:Canvas width="100%" height="100%">
		<s:Group width="100%" height="100%"  id="mainEdit"   left="0" top="0" >
			<mx:Canvas width="100%" height="100%" left="0" top="0" backgroundColor="gray">
				<mx:Image  left="2"   top="1" click="onPntClick()"  source="@Embed('images/addPoint.png')" buttonMode="true" 
						   rollOut="rollOutHandler(event)" rollOver="rollRightOverHandler(event)" toolTip="添加点要素">
					
				</mx:Image>
				<mx:Image left="123" top="1"  click="onLineClick()" source="@Embed('images/addLine.png')" buttonMode="true" 
						  rollOut="rollOutHandler(event)" rollOver="rollRightOverHandler(event)" toolTip="添加线要素">
					
				</mx:Image>
				<mx:Image left="2"  top="83"   click="onPolygonclick()" source="@Embed('images/addPolygon.png')" buttonMode="true" 
						  rollOut="rollOutHandler(event)" rollOver="rollRightOverHandler(event)" toolTip="添加区要素">
					
				</mx:Image>
			</mx:Canvas>
			<!--<mx:Button label="添加点要素" left="10"  top="5" click="onPntClick()" width="90" height="30"   fontSize="12" fontFamily="宋体" />
			<mx:Button label="添加线要素" left="130" top="5" click="onLineClick()" width="90" height="30"   fontSize="12" fontFamily="宋体" />
			<mx:Button label="添加区要素" left="10"  top="50"  click="onPolygonclick()" width="90" height="30"   fontSize="12" fontFamily="宋体" />-->
			
			
		</s:Group>
		
		<s:Group id="setFeatureParam" left="0" top="0"  width="100%" height="100%" visible="false" includeInLayout="false">
			<mx:TabNavigator width="100%" height="220">
				<s:NavigatorContent label="属性参数设置" width="100%" height="100%">
					<mx:Canvas width="100%" height="100%">
						<s:VGroup id="_editVGroup"  width="100%"    >
							<mx:Label   fontSize="10"  text="点击上面按钮后，您可以通过鼠标在地图上添加点、线或者区要素。"/>
						</s:VGroup>
					</mx:Canvas>
					
				</s:NavigatorContent>
				<s:NavigatorContent label="要素参数设置">
					<mx:Canvas>
						<s:VGroup id="_editFeaVGroup"  width="100%"    top="0"  >
							{this._stylebox}
						</s:VGroup>
					</mx:Canvas>
				</s:NavigatorContent>
			</mx:TabNavigator>
			<s:Group left="0" bottom="10" height="35" width="100%" >
				<mx:Button label="确定" left="15"  top="5" click="submitForAdd(event)" width="90" height="30"   fontSize="12" fontFamily="宋体" />
				<mx:Button label="返回" left="215" top="5" click="reBackToClickWindow()" width="90" height="30"   fontSize="12" fontFamily="宋体" />
			</s:Group>
			
		</s:Group>	 
	</mx:Canvas>
</components:BasicTileWindow>
