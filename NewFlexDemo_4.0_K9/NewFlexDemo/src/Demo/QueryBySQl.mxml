<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:map="zdims.map.*" initialize="application1_initializeHandler(event)" xmlns:drawing="zdims.drawing.*" xmlns:layer="zdims.control.layer.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style source="css/windowstyle.css">
	</fx:Style>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:Iris id="irisOut" duration="1000" showTarget="true">			
		</mx:Iris>
		<mx:Iris id="irisIn" duration="1000" showTarget="false">			
		</mx:Iris>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import Mapgis7.WebService.BasLib.*;			
			import zdimsExtends.QueryControl.drawHighLight;
			import config.ServerIP;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import utilEvent.ReadURLEvent;
			import zdims.event.IMSMapEvent;
			import zdims.event.IMSMapMouseEvent;
			import zdims.util.IMSOperType;	
			private var VecAddress:String="";
			private var TileAddress:String="";
			private var viewConfig:ServerIP;
			//定义图层数组
			[Bindable]
			private var queryLayers:Array = ["世界政区"];
			private var Type:String;
			private var callfun:Function;
			import mx.events.FlexEvent;
			private function tile_creationCompleteHandler():void{
				viewConfig=new ServerIP();
				viewConfig.mapConfig1(this);
				this.addEventListener(ReadURLEvent.READ_COMPLETE, TilereadURLCompelte);
			}
			//获取服务地址
			private function TilereadURLCompelte(event:ReadURLEvent):void
			{
				TileAddress=viewConfig.TileURL;
				VecAddress=viewConfig.vectorURL;
				this.tilelayer.serverAddress=TileAddress;
				this.vectorlayer.serverAddress=VecAddress;
				//添加地图容器的加载完毕事件：更新图层状态
				this.mapContainer.addEventListener(IMSMapEvent.MAPEVENT_MAPREADY,upLayer);
			}
			protected function upLayer(event:IMSMapEvent):void
			{
				this.changeHandler();
			}
			protected function application1_initializeHandler(event:FlexEvent):void
			{
				tile_creationCompleteHandler();
			}
			public function onOperChange(e:Event):void
			{
				if(this.Type!=""&&this.callfun!=null)
					this.mapContainer.removeEventListener(this.Type,this.callfun);
			}
			//选择查询图层，更新图层状态为编辑状态
			protected function changeHandler():void
			{
				//定义图层更新传入参数对象
				var setLayerState:CSetSingleLayerStatusONFlex=new CSetSingleLayerStatusONFlex();
				//图层所在GDB数据库在vectorLayer中的索引号
				setLayerState.GdbIndex=0;
				//图层所在在vectorLayer中的索引号
				setLayerState.LayerIndex=this.subQueryLayer.selectedIndex;
				//设置图层状态
				setLayerState.LayerStatus=EnumLayerStatus.Editable;
				//调用vectorlayer的更新图层方法，更新图层状态
				this.vectorlayer.setSingleLayerStatusONFlex(setLayerState, onSetSingleLayerStatus);
			}
			
			// 设置单图层的状态回调函数
			public function onSetSingleLayerStatus(e:Event):void
			{
				var rlt:COperResult=this.vectorlayer.onSetAllEnumLayerStatus(e);
				if (rlt.OperResult)
				{	
					//设置当前激活的图
					this.mapContainer.activeLayerObj=this.vectorlayer;
					this.mapContainer.setCurOper(IMSOperType.Refresh);
					//Alert.show("图层状态更新成功!");
				}
			}
			private function select():void
			{
				if (!this.mapContainer.existActiveLayerObj())
				{
					//当前地图容器是否有激活的地图对象
					return;
				}
				if(this.txtSqlExpress.text!="")
				{
					//初始化图层查询参数传入对象
					var mapsel:CLayerSelectParam = new CLayerSelectParam();
					//初始化web查询参数设置对象类
					var websel:CWebSelectParam = new CWebSelectParam();
					websel.CompareRectOnly = this.mapContainer.activeLayerObj.compareRectOnly;
					websel.MustInside = this.mapContainer.activeLayerObj.mustInside;
					//设置查询半径
					websel.NearDistance = this.mapContainer.activeLayerObj.nearDistanse;
					//设置查询类型
					websel.SelectionType = ESelectionType.Condition;
					//属性查询条件
					websel.WhereClause = this.txtSqlExpress.text;
					//设置web查询参数对象
					mapsel.WebSelectParam = websel;
					//查询页面	
					mapsel.PageCount = 0;				
					this.layerDataRlt._lastSelectParam=mapsel;
					//调用矢量图层的属性查询方法，查询要素
					this.mapContainer.activeLayerObj.layerSelectAndGetAtt(mapsel, callBack);
					if(this.highlight.selected)
					{
						//高亮显示查询结果，传入地图容器对象，web查询参数，绘图层对象
						drawHighLight.instance.AddhighLightFeatures(this.mapContainer,mapsel,this.graphicsLayer);
					}
				}
			}
			protected function excuteQuery_clickHandler(event:MouseEvent):void
			{
				if (!this.mapContainer.existActiveLayerObj())
				{
					//当前地图容器是否有激活的地图对象
					return;
				}
			
				if(this.txtSqlExpress.text!="")
				{
					//初始化图层查询参数传入对象
					var mapsel:CLayerSelectParam = new CLayerSelectParam();
					//初始化web查询参数设置对象类
					var websel:CWebSelectParam = new CWebSelectParam();
					websel.CompareRectOnly = this.mapContainer.activeLayerObj.compareRectOnly;
					websel.MustInside = this.mapContainer.activeLayerObj.mustInside;
					//设置查询半径
					websel.NearDistance = this.mapContainer.activeLayerObj.nearDistanse;
					//设置查询类型
					websel.SelectionType = ESelectionType.Condition;
					//属性查询条件
					websel.WhereClause = this.txtSqlExpress.text;
					//设置web查询参数对象
					mapsel.WebSelectParam = websel;
					//查询页面		
					mapsel.PageCount = 0;			
					this.layerDataRlt._lastSelectParam=mapsel;
					//调用矢量图层的属性查询方法，查询要素
					this.mapContainer.activeLayerObj.layerSelectAndGetAtt(mapsel, callBack);
					if(this.highlight.selected)
					{
						//高亮显示查询结果，传入地图容器对象，web查询参数，绘图层对象
						drawHighLight.instance.AddhighLightFeatures(this.mapContainer,mapsel,this.graphicsLayer);
					}
				}
			}
			//查询要素回调处理事件
			public function callBack(e:Event):void
			{
				//获取查询结果，并显示到查询结果框中
				this.layerDataRlt.showResult(this.vectorlayer.onLayerSelectAndGetAtt(e));
				layerDataRlt.visible= true;
			}
			//清理查询结果
			protected function clear_clickHandler(event:MouseEvent):void
			{
				this.graphicsLayer.removeAllGraphics();
			}
			//更新图层状态
			protected function subQueryLayer_clickHandler(event:MouseEvent):void
			{
				changeHandler();
			}
			
		]]>
	</fx:Script>
	<s:controlBarLayout >
		<s:BasicLayout/>
	</s:controlBarLayout>
	<s:controlBarContent>
		<s:HGroup height="35" verticalAlign="middle" left="10" width="100%">
		<s:Label  text=" 属性条件查询：点击 “查询”"   fontFamily="宋体" fontSize="14"  fontWeight="bold"  left="5" textAlign="left" verticalAlign="middle" />
	</s:HGroup>
	</s:controlBarContent>
		<!--添加地图容器-->
		<map:IMSMap  id="mapContainer"  xMinMap="-181.18399779022" xMaxMap="188.619962766591"
					 enableProgressBar="false" enableZoomOutMinLevel="false"	 yMinMap="-90.7340663245236" yMaxMap="279.069894232288" levelNum="8" initShowLevel="4" restoreCenterX="102.85000121166703" restoreCenterY="33.31638333491467">
			<!--添加矢量图层-->
			<map:VectorLayerSource  id="layer1" layerName="世界政区" layerType="简单要素类"/>
			<map:VectorLayerDataCfg x="151" y="102" id="gdb1" GDBName="平台基础示例数据" GDBServerName="MapGisLocal" layerInfos="{[layer1]}">
			</map:VectorLayerDataCfg>
			<map:VectorLayer x="136" y="140" id="vectorlayer" display="false" layerInfoArr="{[gdb1]}"  >
			</map:VectorLayer>
			<!--添加瓦皮图层-->
			<map:TileLayer hdfName="world.hdf" id="tilelayer"  >
			</map:TileLayer>	
			<!--添加绘图层-->
			<drawing:GraphicsLayer id="graphicsLayer" >	
			</drawing:GraphicsLayer>
			<drawing:GraphicsLayer id="graphicsLayer1" >	
			</drawing:GraphicsLayer>	
		</map:IMSMap>
	<!--属性查询设置框-->
	<mx:TitleWindow  id="titlewin" title="属性查询："  fontSize="12" fontFamily="宋体" x="10"    y="40"  headerColors="{['#516A81','#516A81']}">	
		<s:VGroup gap="10" left="5" top="5" bottom="5" right="5">
			<s:HGroup>
				<mx:Label text="查询图层：" />			
				<mx:ComboBox id="subQueryLayer"  dataProvider="{queryLayers}" selectedIndex="0" click="subQueryLayer_clickHandler(event)"        width="146"/>
			</s:HGroup>
			<s:HGroup>
				<mx:Label text="SQL 语句："/>
				<mx:Spacer width="3"/>
				<mx:TextInput id="txtSqlExpress" fontFamily="宋体" fontSize="12" text="name like '中华%'"/>
			</s:HGroup>
			<s:HGroup>
				<s:CheckBox id="highlight" content="    是否高亮显示" >								
				</s:CheckBox>
			</s:HGroup>
			<s:HGroup gap="10" width="100%" height="100%" horizontalAlign="center">
				<mx:Button label="查询" id="excuteQuery"   click="excuteQuery_clickHandler(event)" />
				<mx:Button label="清除高亮显示" id="clear"  click="clear_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</mx:TitleWindow>
	<!--查询结果显示框-->
	<layer:LayerDataViewer right="10" top="10" id="layerDataRlt" graphicslayer="{graphicsLayer1}"   
						   imsmap="{mapContainer}"  visible="false">
	</layer:LayerDataViewer>
</s:Application>
